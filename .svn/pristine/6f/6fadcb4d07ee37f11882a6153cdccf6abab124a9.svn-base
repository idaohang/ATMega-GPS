
gps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000086  00800060  00800060  0000020a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b3  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000214  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000127  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c4  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000030  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 3e       	cpi	r26, 0xE6	; 230
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  74:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <readFromBuffer>:
short currentSize=0;

volatile uint8_t data[BUFFER_SIZE];//data

     
uint8_t readFromBuffer(){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
        uint8_t ret='@';
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	89 83       	std	Y+1, r24	; 0x01
		if(!isEmpty()){
  8a:	0e 94 b2 00 	call	0x164	; 0x164 <isEmpty>
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	f1 f4       	brne	.+60     	; 0xce <readFromBuffer+0x52>
	        ret = data[readPointer];
  92:	80 91 62 00 	lds	r24, 0x0062
  96:	90 91 63 00 	lds	r25, 0x0063
  9a:	8a 59       	subi	r24, 0x9A	; 154
  9c:	9f 4f       	sbci	r25, 0xFF	; 255
  9e:	fc 01       	movw	r30, r24
  a0:	80 81       	ld	r24, Z
  a2:	89 83       	std	Y+1, r24	; 0x01
			currentSize--;
  a4:	80 91 64 00 	lds	r24, 0x0064
  a8:	90 91 65 00 	lds	r25, 0x0065
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	90 93 65 00 	sts	0x0065, r25
  b2:	80 93 64 00 	sts	0x0064, r24
	        readPointer = (readPointer + 1) & (BUFFER_SIZE-1); // This is the useful point is choosing the array length to be a power of two
  b6:	80 91 62 00 	lds	r24, 0x0062
  ba:	90 91 63 00 	lds	r25, 0x0063
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	90 93 63 00 	sts	0x0063, r25
  c8:	80 93 62 00 	sts	0x0062, r24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <readFromBuffer+0x56>
		}else ret='@';
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	89 83       	std	Y+1, r24	; 0x01
		return ret;
  d2:	89 81       	ldd	r24, Y+1	; 0x01
}
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <writeToBuffer>:
 
void writeToBuffer(uint8_t newByte){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
 		if(!isFull()){
  e8:	0e 94 a0 00 	call	0x140	; 0x140 <isFull>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	e9 f4       	brne	.+58     	; 0x12a <writeToBuffer+0x4e>
	        data[writePointer] = newByte;
  f0:	80 91 60 00 	lds	r24, 0x0060
  f4:	90 91 61 00 	lds	r25, 0x0061
  f8:	8a 59       	subi	r24, 0x9A	; 154
  fa:	9f 4f       	sbci	r25, 0xFF	; 255
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
			currentSize++;
 102:	80 91 64 00 	lds	r24, 0x0064
 106:	90 91 65 00 	lds	r25, 0x0065
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 65 00 	sts	0x0065, r25
 110:	80 93 64 00 	sts	0x0064, r24
	        writePointer = (writePointer + 1) & (BUFFER_SIZE-1); // This is the useful point is choosing the array length to be a power of two
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	90 91 61 00 	lds	r25, 0x0061
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	90 70       	andi	r25, 0x00	; 0
 122:	90 93 61 00 	sts	0x0061, r25
 126:	80 93 60 00 	sts	0x0060, r24
		}
}
 12a:	0f 90       	pop	r0
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <flushBuffer>:

void flushBuffer(){}
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <isFull>:
int isFull(){return (currentSize==BUFFER_SIZE);}
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	20 91 64 00 	lds	r18, 0x0064
 14c:	30 91 65 00 	lds	r19, 0x0065
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 38       	cpi	r18, 0x80	; 128
 156:	31 05       	cpc	r19, r1
 158:	11 f0       	breq	.+4      	; 0x15e <isFull+0x1e>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <isEmpty>:
int isEmpty(){return (currentSize==0);}
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	20 91 64 00 	lds	r18, 0x0064
 170:	30 91 65 00 	lds	r19, 0x0065
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	21 15       	cp	r18, r1
 17a:	31 05       	cpc	r19, r1
 17c:	11 f0       	breq	.+4      	; 0x182 <isEmpty+0x1e>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <main>:
 */ 

#include <avr/io.h>

int main(void)
{
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        //TODO:: Please write your application code 
    }
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0x8>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
