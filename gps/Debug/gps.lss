
gps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000026c2  00002756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  008000f6  008000f6  000027ec  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d4  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015c1  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e7  00000000  00000000  00004461  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec2  00000000  00000000  00004b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00005a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000675  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ee  00000000  00000000  000063a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  0000698f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_7>
      20:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_13>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

00000054 <__c.1790>:
      54:	6e 61 6e 00                                         nan.

00000058 <__c.1788>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <pstr_inf>:
     156:	49 4e 46                                            INF

00000159 <pstr_inity>:
     159:	49 4e 49 54 59                                      INITY

0000015e <pstr_nan>:
     15e:	4e 41 4e                                            NAN

00000161 <pwr_m10>:
     161:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     171:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000179 <pwr_p10>:
     179:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     189:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf e5       	ldi	r28, 0x5F	; 95
     198:	d8 e0       	ldi	r29, 0x08	; 8
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	10 e0       	ldi	r17, 0x00	; 0
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e2 ec       	ldi	r30, 0xC2	; 194
     1a6:	f6 e2       	ldi	r31, 0x26	; 38
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <.do_copy_data_start>

000001aa <.do_copy_data_loop>:
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0

000001ae <.do_copy_data_start>:
     1ae:	a6 3f       	cpi	r26, 0xF6	; 246
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <.do_copy_data_loop>

000001b4 <__do_clear_bss>:
     1b4:	13 e0       	ldi	r17, 0x03	; 3
     1b6:	a6 ef       	ldi	r26, 0xF6	; 246
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a2 37       	cpi	r26, 0x72	; 114
     1c0:	b1 07       	cpc	r27, r17
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
     1c8:	0c 94 5f 13 	jmp	0x26be	; 0x26be <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <readFromBuffer>:
		}
}


int isFull(){return (currentSize==BUFFER_SIZE-1);}
int isEmpty(){return (currentSize==0);}
     1d0:	20 91 f6 00 	lds	r18, 0x00F6
     1d4:	30 91 f7 00 	lds	r19, 0x00F7
volatile char data[BUFFER_SIZE];//data

     
char readFromBuffer(){
       char ret='@'; 
		if(!isEmpty()){
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <readFromBuffer+0x12>
     1de:	e0 e4       	ldi	r30, 0x40	; 64
     1e0:	14 c0       	rjmp	.+40     	; 0x20a <readFromBuffer+0x3a>
	        ret= data[readPointer];
     1e2:	80 91 fa 00 	lds	r24, 0x00FA
     1e6:	90 91 fb 00 	lds	r25, 0x00FB
     1ea:	fc 01       	movw	r30, r24
     1ec:	e1 5e       	subi	r30, 0xE1	; 225
     1ee:	fe 4f       	sbci	r31, 0xFE	; 254
     1f0:	e0 81       	ld	r30, Z
			currentSize--;
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	30 40       	sbci	r19, 0x00	; 0
     1f6:	30 93 f7 00 	sts	0x00F7, r19
     1fa:	20 93 f6 00 	sts	0x00F6, r18
	        readPointer = (readPointer + 1) & (BUFFER_SIZE-1); // This is the useful point is choosing the array length to be a power of two
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	91 70       	andi	r25, 0x01	; 1
     202:	90 93 fb 00 	sts	0x00FB, r25
     206:	80 93 fa 00 	sts	0x00FA, r24
		}else ret='@';
		return ret;
}
     20a:	8e 2f       	mov	r24, r30
     20c:	08 95       	ret

0000020e <writeToBuffer>:
 
void writeToBuffer(char newByte){
     20e:	48 2f       	mov	r20, r24
	        writePointer = (writePointer + 1) & (BUFFER_SIZE-1); // This is the useful point is choosing the array length to be a power of two
		}
}


int isFull(){return (currentSize==BUFFER_SIZE-1);}
     210:	20 91 f6 00 	lds	r18, 0x00F6
     214:	30 91 f7 00 	lds	r19, 0x00F7
		}else ret='@';
		return ret;
}
 
void writeToBuffer(char newByte){
 		if(!isFull()){
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	2f 3f       	cpi	r18, 0xFF	; 255
     21c:	38 07       	cpc	r19, r24
     21e:	a1 f0       	breq	.+40     	; 0x248 <writeToBuffer+0x3a>
	        data[writePointer] = newByte;
     220:	80 91 f8 00 	lds	r24, 0x00F8
     224:	90 91 f9 00 	lds	r25, 0x00F9
     228:	fc 01       	movw	r30, r24
     22a:	e1 5e       	subi	r30, 0xE1	; 225
     22c:	fe 4f       	sbci	r31, 0xFE	; 254
     22e:	40 83       	st	Z, r20
			currentSize++;
     230:	2f 5f       	subi	r18, 0xFF	; 255
     232:	3f 4f       	sbci	r19, 0xFF	; 255
     234:	30 93 f7 00 	sts	0x00F7, r19
     238:	20 93 f6 00 	sts	0x00F6, r18
	        writePointer = (writePointer + 1) & (BUFFER_SIZE-1); // This is the useful point is choosing the array length to be a power of two
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	91 70       	andi	r25, 0x01	; 1
     240:	90 93 f9 00 	sts	0x00F9, r25
     244:	80 93 f8 00 	sts	0x00F8, r24
     248:	08 95       	ret

0000024a <isFull>:
		}
}


int isFull(){return (currentSize==BUFFER_SIZE-1);}
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	80 91 f6 00 	lds	r24, 0x00F6
     252:	90 91 f7 00 	lds	r25, 0x00F7
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	91 40       	sbci	r25, 0x01	; 1
     25a:	11 f4       	brne	.+4      	; 0x260 <isFull+0x16>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	c9 01       	movw	r24, r18
     262:	08 95       	ret

00000264 <isEmpty>:
int isEmpty(){return (currentSize==0);}
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	80 91 f6 00 	lds	r24, 0x00F6
     26c:	90 91 f7 00 	lds	r25, 0x00F7
     270:	89 2b       	or	r24, r25
     272:	11 f4       	brne	.+4      	; 0x278 <isEmpty+0x14>
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	c9 01       	movw	r24, r18
     27a:	08 95       	ret

0000027c <initButtonHandler>:
volatile short buttonChanged=0;

			
 void initButtonHandler(){
	
	DDRC|=(1<<DDC7);//PIN 7 of PORT C is input
     27c:	a7 9a       	sbi	0x14, 7	; 20
	PORTC|=(1<<PC7);//Enable pull-up of PIN 7 of PORT C
     27e:	af 9a       	sbi	0x15, 7	; 21
	
	TCCR1B|=/*(0<<CS12)|(0<<CS10)|*/(1 << WGM12)|(1<<CS11);// clock, ctc mode
     280:	8e b5       	in	r24, 0x2e	; 46
     282:	8a 60       	ori	r24, 0x0A	; 10
     284:	8e bd       	out	0x2e, r24	; 46
	OCR1A=64000;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	9a ef       	ldi	r25, 0xFA	; 250
     28a:	9b bd       	out	0x2b, r25	; 43
     28c:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A);//enable interrupt for output compare	
     28e:	89 b7       	in	r24, 0x39	; 57
     290:	80 61       	ori	r24, 0x10	; 16
     292:	89 bf       	out	0x39, r24	; 57
}
     294:	08 95       	ret

00000296 <__vector_7>:


ISR(TIMER1_COMPA_vect){
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	2f 93       	push	r18
     2a2:	3f 93       	push	r19
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
	if(!(PINC & (1<<PC7) )){
     2a8:	9f 99       	sbic	0x13, 7	; 19
     2aa:	20 c0       	rjmp	.+64     	; 0x2ec <__vector_7+0x56>
		
		while(!(PINC & (1<<PC7) ));//wait for the button to be released
     2ac:	9f 9b       	sbis	0x13, 7	; 19
     2ae:	fe cf       	rjmp	.-4      	; 0x2ac <__vector_7+0x16>
		if(flag<2){
     2b0:	20 91 60 00 	lds	r18, 0x0060
     2b4:	30 91 61 00 	lds	r19, 0x0061
     2b8:	22 30       	cpi	r18, 0x02	; 2
     2ba:	31 05       	cpc	r19, r1
     2bc:	6c f4       	brge	.+26     	; 0x2d8 <__vector_7+0x42>
			buttonChanged=1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 fd 00 	sts	0x00FD, r25
     2c6:	80 93 fc 00 	sts	0x00FC, r24
			flag++;
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	30 93 61 00 	sts	0x0061, r19
     2d2:	20 93 60 00 	sts	0x0060, r18
     2d6:	0a c0       	rjmp	.+20     	; 0x2ec <__vector_7+0x56>
		}else{
			flag=1;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 61 00 	sts	0x0061, r25
     2e0:	80 93 60 00 	sts	0x0060, r24
			buttonChanged=1;
     2e4:	90 93 fd 00 	sts	0x00FD, r25
     2e8:	80 93 fc 00 	sts	0x00FC, r24
		}
	}			
		
		
     2ec:	9f 91       	pop	r25
     2ee:	8f 91       	pop	r24
     2f0:	3f 91       	pop	r19
     2f2:	2f 91       	pop	r18
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e9       	ldi	r25, 0x90	; 144
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <main+0x4>
#include <util/delay.h>
//nmea.h is no longer used. instead, nmea_fsm.h will be used
int main(void)
{
	_delay_ms(20);//wait for the LCD to startup before sending commands
	init_HD44780();
     306:	0e 94 a3 01 	call	0x346	; 0x346 <init_HD44780>
	initButtonHandler();
     30a:	0e 94 3e 01 	call	0x27c	; 0x27c <initButtonHandler>
	init_USART();
     30e:	0e 94 88 09 	call	0x1310	; 0x1310 <init_USART>
	
	write_HD44780_Command(DIS_ON_CUR_OFF_BLNK_OFF);
     312:	8c e0       	ldi	r24, 0x0C	; 12
     314:	0e 94 92 01 	call	0x324	; 0x324 <write_HD44780_Command>
	sei();//Enable global interrupts.
     318:	78 94       	sei
	init_NMEA_FSM();
     31a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <init_NMEA_FSM>
	return 0;
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <write_HD44780_Command>:
	_delay_ms(1);
	write_HD44780_Command(DIS_FUNC_SET);
}

void write_HD44780_Command(unsigned char cmd){
	LCD_PORT=0x0;
     324:	18 ba       	out	0x18, r1	; 24
	LCD_PORT|=cmd;
     326:	98 b3       	in	r25, 0x18	; 24
     328:	98 2b       	or	r25, r24
     32a:	98 bb       	out	0x18, r25	; 24
	CLR_RW_PIN;
     32c:	d9 98       	cbi	0x1b, 1	; 27
	CLR_RS_PIN;
     32e:	d8 98       	cbi	0x1b, 0	; 27
	CLR_E_PIN;	
     330:	da 98       	cbi	0x1b, 2	; 27
	SET_E_PIN;
     332:	da 9a       	sbi	0x1b, 2	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	8a 95       	dec	r24
     338:	f1 f7       	brne	.-4      	; 0x336 <write_HD44780_Command+0x12>
	_delay_us(1);// wait
	CLR_E_PIN;
     33a:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33c:	83 e3       	ldi	r24, 0x33	; 51
     33e:	97 e0       	ldi	r25, 0x07	; 7
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <write_HD44780_Command+0x1c>
	_delay_ms(1);
}
     344:	08 95       	ret

00000346 <init_HD44780>:
#include "hd44780.h"

void init_HD44780(){
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
	DDRB=0xFF;//All pins output of LCD_PORT
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	87 bb       	out	0x17, r24	; 23
	DDRA=(1<<DDB0)|(1<<DDB1)|(1<<DDB2);
     34e:	87 e0       	ldi	r24, 0x07	; 7
     350:	8a bb       	out	0x1a, r24	; 26
     352:	03 e3       	ldi	r16, 0x33	; 51
     354:	17 e0       	ldi	r17, 0x07	; 7
     356:	c8 01       	movw	r24, r16
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <init_HD44780+0x12>
	
	_delay_ms(1);
	write_HD44780_Command(CLEAR_DISPLAY);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 92 01 	call	0x324	; 0x324 <write_HD44780_Command>
     362:	c8 01       	movw	r24, r16
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <init_HD44780+0x1e>
	_delay_ms(1);
	write_HD44780_Command(DIS_ON_CUR_ON_BLNK_ON);
     368:	8f e0       	ldi	r24, 0x0F	; 15
     36a:	0e 94 92 01 	call	0x324	; 0x324 <write_HD44780_Command>
     36e:	c8 01       	movw	r24, r16
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <init_HD44780+0x2a>
	_delay_ms(1);
	write_HD44780_Command(DIS_FUNC_SET);
     374:	88 e3       	ldi	r24, 0x38	; 56
     376:	0e 94 92 01 	call	0x324	; 0x324 <write_HD44780_Command>
}
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <write_HD44780_Data>:
	address+=x-1;
	
	write_HD44780_DataAt(address,data);
}

void write_HD44780_Data(char* data){
     380:	fc 01       	movw	r30, r24
	SET_RS_PIN;
     382:	d8 9a       	sbi	0x1b, 0	; 27
	CLR_RW_PIN;
     384:	d9 98       	cbi	0x1b, 1	; 27
	CLR_E_PIN;
     386:	da 98       	cbi	0x1b, 2	; 27
     388:	63 e3       	ldi	r22, 0x33	; 51
     38a:	77 e0       	ldi	r23, 0x07	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     38c:	32 e0       	ldi	r19, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38e:	40 e7       	ldi	r20, 0x70	; 112
     390:	51 e0       	ldi	r21, 0x01	; 1
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <write_HD44780_Data+0x30>
     394:	cb 01       	movw	r24, r22
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <write_HD44780_Data+0x16>
	while(*data){
		_delay_ms(1);
		LCD_PORT=0x0;
     39a:	18 ba       	out	0x18, r1	; 24
		LCD_PORT=*data;
     39c:	28 bb       	out	0x18, r18	; 24
		SET_E_PIN;
     39e:	da 9a       	sbi	0x1b, 2	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3a0:	83 2f       	mov	r24, r19
     3a2:	8a 95       	dec	r24
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <write_HD44780_Data+0x22>
		_delay_us(1);
		CLR_E_PIN;
     3a6:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3a8:	ca 01       	movw	r24, r20
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <write_HD44780_Data+0x2a>
		_delay_us(200);
		data++;
     3ae:	31 96       	adiw	r30, 0x01	; 1

void write_HD44780_Data(char* data){
	SET_RS_PIN;
	CLR_RW_PIN;
	CLR_E_PIN;
	while(*data){
     3b0:	20 81       	ld	r18, Z
     3b2:	22 23       	and	r18, r18
     3b4:	79 f7       	brne	.-34     	; 0x394 <write_HD44780_Data+0x14>
		_delay_us(1);
		CLR_E_PIN;
		_delay_us(200);
		data++;
	}
}
     3b6:	08 95       	ret

000003b8 <set_HD44780_DDRAM_Address>:

void set_HD44780_DDRAM_Address(unsigned char address){
	CLR_RS_PIN;//select IR
     3b8:	d8 98       	cbi	0x1b, 0	; 27
	CLR_RW_PIN;//Going to write
     3ba:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT=0x0;
     3bc:	18 ba       	out	0x18, r1	; 24
	LCD_PORT|=(1<<7); //|=0b10000000
     3be:	c7 9a       	sbi	0x18, 7	; 24
	//Now set address
	LCD_PORT|=address;
     3c0:	98 b3       	in	r25, 0x18	; 24
     3c2:	98 2b       	or	r25, r24
     3c4:	98 bb       	out	0x18, r25	; 24
	CLR_E_PIN;
     3c6:	da 98       	cbi	0x1b, 2	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	98 2f       	mov	r25, r24
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <set_HD44780_DDRAM_Address+0x14>
	_delay_us(2);
	SET_E_PIN;
     3d0:	da 9a       	sbi	0x1b, 2	; 27
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <set_HD44780_DDRAM_Address+0x1a>
	_delay_us(2);
	CLR_E_PIN;
     3d6:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d8:	83 e3       	ldi	r24, 0x33	; 51
     3da:	97 e0       	ldi	r25, 0x07	; 7
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <set_HD44780_DDRAM_Address+0x24>
	_delay_ms(1);

}
     3e0:	08 95       	ret

000003e2 <write_HD44780_DataAt>:
	_delay_us(1);// wait
	CLR_E_PIN;
	_delay_ms(1);
}

void write_HD44780_DataAt(unsigned char address,char* data){
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	8b 01       	movw	r16, r22
	set_HD44780_DDRAM_Address(address);
     3e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_HD44780_DDRAM_Address>
	write_HD44780_Data(data);
     3ec:	c8 01       	movw	r24, r16
     3ee:	0e 94 c0 01 	call	0x380	; 0x380 <write_HD44780_Data>
}
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <write_HD44780_DataAtRowCol>:

void write_HD44780_DataAtRowCol(unsigned char y,unsigned char x,char* data){
     3f8:	26 2f       	mov	r18, r22
	unsigned char address=0;
	switch(y){
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	41 f0       	breq	.+16     	; 0x40e <write_HD44780_DataAtRowCol+0x16>
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	41 f0       	breq	.+16     	; 0x412 <write_HD44780_DataAtRowCol+0x1a>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	11 f4       	brne	.+4      	; 0x40a <write_HD44780_DataAtRowCol+0x12>
     406:	90 e4       	ldi	r25, 0x40	; 64
     408:	05 c0       	rjmp	.+10     	; 0x414 <write_HD44780_DataAtRowCol+0x1c>
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	03 c0       	rjmp	.+6      	; 0x414 <write_HD44780_DataAtRowCol+0x1c>
     40e:	90 e1       	ldi	r25, 0x10	; 16
     410:	01 c0       	rjmp	.+2      	; 0x414 <write_HD44780_DataAtRowCol+0x1c>
		case 2:
			address=0x40;
			break;
		case 3:
			address=0x10;
			break;
     412:	90 e5       	ldi	r25, 0x50	; 80
			break;	
	}

	address+=x-1;
	
	write_HD44780_DataAt(address,data);
     414:	21 50       	subi	r18, 0x01	; 1
     416:	82 2f       	mov	r24, r18
     418:	89 0f       	add	r24, r25
     41a:	ba 01       	movw	r22, r20
     41c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <write_HD44780_DataAt>
}
     420:	08 95       	ret

00000422 <clearDisplay>:
	CLR_E_PIN;
	_delay_ms(1);

}

void clearDisplay(short row,short fromCol,short toCol){
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	00 d0       	rcall	.+0      	; 0x436 <clearDisplay+0x14>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	b8 2e       	mov	r11, r24
     43c:	6a 01       	movw	r12, r20
	char c[]=" ";
     43e:	80 91 62 00 	lds	r24, 0x0062
     442:	90 91 63 00 	lds	r25, 0x0063
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	8b 01       	movw	r16, r22
	for(int j=fromCol;j<=toCol;j++){
		write_HD44780_DataAtRowCol(row,j,c);
     44c:	7e 01       	movw	r14, r28
     44e:	08 94       	sec
     450:	e1 1c       	adc	r14, r1
     452:	f1 1c       	adc	r15, r1
     454:	07 c0       	rjmp	.+14     	; 0x464 <clearDisplay+0x42>
     456:	8b 2d       	mov	r24, r11
     458:	60 2f       	mov	r22, r16
     45a:	a7 01       	movw	r20, r14
     45c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>

}

void clearDisplay(short row,short fromCol,short toCol){
	char c[]=" ";
	for(int j=fromCol;j<=toCol;j++){
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	c0 16       	cp	r12, r16
     466:	d1 06       	cpc	r13, r17
     468:	b4 f7       	brge	.-20     	; 0x456 <clearDisplay+0x34>
		write_HD44780_DataAtRowCol(row,j,c);
		
	}
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	bf 90       	pop	r11
     480:	08 95       	ret

00000482 <handleTimeOut>:
		
		current_state=Idle;
}

void handleTimeOut(){
	current_state=Idle;
     482:	10 92 1e 01 	sts	0x011E, r1
}
     486:	08 95       	ret

00000488 <clearBuffer>:
	readNextParameter(date,6);
	
}


void clearBuffer(char* buffer,short length){
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     48c:	61 50       	subi	r22, 0x01	; 1
     48e:	70 40       	sbci	r23, 0x00	; 0
		buffer[i]=' ';
     490:	40 e2       	ldi	r20, 0x20	; 32
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <clearBuffer+0x18>
     494:	fc 01       	movw	r30, r24
     496:	e2 0f       	add	r30, r18
     498:	f3 1f       	adc	r31, r19
     49a:	40 83       	st	Z, r20
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	26 17       	cp	r18, r22
     4a2:	37 07       	cpc	r19, r23
     4a4:	bc f3       	brlt	.-18     	; 0x494 <clearBuffer+0xc>
		buffer[i]=' ';
	}
}
     4a6:	08 95       	ret

000004a8 <makeNullTerminating>:
		if(temp=='\n' &&temp2=='\r')break;// end of sentence
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
     4a8:	fb 01       	movw	r30, r22
	str[length-1]='\0';
     4aa:	e8 0f       	add	r30, r24
     4ac:	f9 1f       	adc	r31, r25
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	10 82       	st	Z, r1
}
     4b2:	08 95       	ret

000004b4 <timeadd>:
	lon_min=tempLon-(lon_deg*100);
		
	lon_decimal=(lon_deg+(tempLon-(lon_deg*100))/60.0);
}

int timeadd(int a,int hours,int minutes){
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	fc 01       	movw	r30, r24
     4c6:	6b 01       	movw	r12, r22
     4c8:	8a 01       	movw	r16, r20
	int i=0,j=0;//i hours,j minutes
	i=a/100;
     4ca:	64 e6       	ldi	r22, 0x64	; 100
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     4d2:	7b 01       	movw	r14, r22
	j=a-(i*100);
     4d4:	8c e9       	ldi	r24, 0x9C	; 156
     4d6:	9f ef       	ldi	r25, 0xFF	; 255
     4d8:	68 9f       	mul	r22, r24
     4da:	e0 01       	movw	r28, r0
     4dc:	69 9f       	mul	r22, r25
     4de:	d0 0d       	add	r29, r0
     4e0:	78 9f       	mul	r23, r24
     4e2:	d0 0d       	add	r29, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	c0 0f       	add	r28, r16
     4e8:	d1 1f       	adc	r29, r17
	
	j+=minutes;
     4ea:	ce 0f       	add	r28, r30
     4ec:	df 1f       	adc	r29, r31
	if(j>=60){
     4ee:	cc 33       	cpi	r28, 0x3C	; 60
     4f0:	d1 05       	cpc	r29, r1
     4f2:	6c f0       	brlt	.+26     	; 0x50e <timeadd+0x5a>
		i=i+(j/60);
     4f4:	ce 01       	movw	r24, r28
     4f6:	6c e3       	ldi	r22, 0x3C	; 60
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     4fe:	e6 0e       	add	r14, r22
     500:	f7 1e       	adc	r15, r23
		j=(j%60);
     502:	ce 01       	movw	r24, r28
     504:	6c e3       	ldi	r22, 0x3C	; 60
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     50c:	ec 01       	movw	r28, r24
	}
	i+=hours;
     50e:	b7 01       	movw	r22, r14
     510:	6c 0d       	add	r22, r12
     512:	7d 1d       	adc	r23, r13
	if(i>=24)i-=24;
     514:	68 31       	cpi	r22, 0x18	; 24
     516:	71 05       	cpc	r23, r1
     518:	14 f0       	brlt	.+4      	; 0x51e <timeadd+0x6a>
     51a:	68 51       	subi	r22, 0x18	; 24
     51c:	70 40       	sbci	r23, 0x00	; 0
     51e:	84 e6       	ldi	r24, 0x64	; 100
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	68 9f       	mul	r22, r24
     524:	90 01       	movw	r18, r0
     526:	69 9f       	mul	r22, r25
     528:	30 0d       	add	r19, r0
     52a:	78 9f       	mul	r23, r24
     52c:	30 0d       	add	r19, r0
     52e:	11 24       	eor	r1, r1
     530:	2c 0f       	add	r18, r28
     532:	3d 1f       	adc	r19, r29
	
	return (i*100+j);
}
     534:	c9 01       	movw	r24, r18
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	08 95       	ret

00000548 <skipNextParameter>:

void skipNextParameter(){
	char temp;
	temp=readFromBuffer();	
	while(temp!=',' && temp!='*'){
		temp=readFromBuffer();
     548:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <readFromBuffer>


void skipNextParameter(){
	char temp;
	temp=readFromBuffer();	
	while(temp!=',' && temp!='*'){
     54c:	8c 32       	cpi	r24, 0x2C	; 44
     54e:	11 f0       	breq	.+4      	; 0x554 <skipNextParameter+0xc>
     550:	8a 32       	cpi	r24, 0x2A	; 42
     552:	d1 f7       	brne	.-12     	; 0x548 <skipNextParameter>
     554:	08 95       	ret

00000556 <readNextParameter>:
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
	}
}

void readNextParameter(char* store,short amount){
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	df 93       	push	r29
     564:	cf 93       	push	r28
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	8c 01       	movw	r16, r24
     56e:	7b 01       	movw	r14, r22
//$ DR Time : 15 *3D
//$ DATUM : WGS84 *3C
//
	char temp2=' ';
	
	temp=readFromBuffer();
     570:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <readFromBuffer>
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	c9 2e       	mov	r12, r25
     578:	d1 2c       	mov	r13, r1
     57a:	90 e2       	ldi	r25, 0x20	; 32
     57c:	99 83       	std	Y+1, r25	; 0x01
     57e:	17 c0       	rjmp	.+46     	; 0x5ae <readNextParameter+0x58>
	while(temp!=',' && temp!='*'){	
		
		if(temp!='@' && count<=amount){
     580:	80 34       	cpi	r24, 0x40	; 64
     582:	99 f0       	breq	.+38     	; 0x5aa <readNextParameter+0x54>
     584:	ec 14       	cp	r14, r12
     586:	fd 04       	cpc	r15, r13
     588:	34 f0       	brlt	.+12     	; 0x596 <readNextParameter+0x40>
		 *store=temp;//if temp=@, it means that buffer is empty. wait for data.
     58a:	f8 01       	movw	r30, r16
     58c:	81 93       	st	Z+, r24
     58e:	8f 01       	movw	r16, r30
		 store++;
		 count++;
     590:	08 94       	sec
     592:	c1 1c       	adc	r12, r1
     594:	d1 1c       	adc	r13, r1
		}	
		if(temp=='\r')temp2=temp;
     596:	8d 30       	cpi	r24, 0x0D	; 13
     598:	19 f4       	brne	.+6      	; 0x5a0 <readNextParameter+0x4a>
     59a:	fd e0       	ldi	r31, 0x0D	; 13
     59c:	f9 83       	std	Y+1, r31	; 0x01
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <readNextParameter+0x54>
		if(temp=='\n' &&temp2=='\r')break;// end of sentence
     5a0:	8a 30       	cpi	r24, 0x0A	; 10
     5a2:	19 f4       	brne	.+6      	; 0x5aa <readNextParameter+0x54>
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	8d 30       	cpi	r24, 0x0D	; 13
     5a8:	31 f0       	breq	.+12     	; 0x5b6 <readNextParameter+0x60>
		temp=readFromBuffer();		
     5aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <readFromBuffer>
//$ DATUM : WGS84 *3C
//
	char temp2=' ';
	
	temp=readFromBuffer();
	while(temp!=',' && temp!='*'){	
     5ae:	8c 32       	cpi	r24, 0x2C	; 44
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <readNextParameter+0x60>
     5b2:	8a 32       	cpi	r24, 0x2A	; 42
     5b4:	29 f7       	brne	.-54     	; 0x580 <readNextParameter+0x2a>
		}	
		if(temp=='\r')temp2=temp;
		if(temp=='\n' &&temp2=='\r')break;// end of sentence
		temp=readFromBuffer();		
	}
}
     5b6:	0f 90       	pop	r0
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <retrieveMsgId>:
	while(readFromBuffer()!='$'); //Wait for the $ to come along
	current_state=RetrieveMsgID;//Change the machine state
}

void retrieveMsgId(){
	readNextParameter(msgID,5);
     5ca:	87 e6       	ldi	r24, 0x67	; 103
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	65 e0       	ldi	r22, 0x05	; 5
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	current_state=RetrieveSentenceData;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	80 93 1e 01 	sts	0x011E, r24
}
     5dc:	08 95       	ret

000005de <idle>:
		}
	}		
}

void idle(){
	while(readFromBuffer()!='$'); //Wait for the $ to come along
     5de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <readFromBuffer>
     5e2:	84 32       	cpi	r24, 0x24	; 36
     5e4:	e1 f7       	brne	.-8      	; 0x5de <idle>
	current_state=RetrieveMsgID;//Change the machine state
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 1e 01 	sts	0x011E, r24
}
     5ec:	08 95       	ret

000005ee <utcToLocalTime>:
	if(i>=24)i-=24;
	
	return (i*100+j);
}

void utcToLocalTime(){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <utcToLocalTime+0x6>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <utcToLocalTime+0x8>
     5f6:	0f 92       	push	r0
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
	char temp[5];
		
	memcpy(temp,utcTime,4);
     5fc:	80 91 3f 03 	lds	r24, 0x033F
     600:	90 91 40 03 	lds	r25, 0x0340
     604:	a0 91 41 03 	lds	r26, 0x0341
     608:	b0 91 42 03 	lds	r27, 0x0342
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	ab 83       	std	Y+3, r26	; 0x03
     612:	bc 83       	std	Y+4, r27	; 0x04
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     614:	1d 82       	std	Y+5, r1	; 0x05
void utcToLocalTime(){
	char temp[5];
		
	memcpy(temp,utcTime,4);
	makeNullTerminating(temp,5);
	int ut=atoi(temp);
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <atoi>
	//5 Hours and 30mins ahead of UTC
	ut=timeadd(ut,5,30);
     61e:	65 e0       	ldi	r22, 0x05	; 5
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	4e e1       	ldi	r20, 0x1E	; 30
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <timeadd>
     62a:	9c 01       	movw	r18, r24
	hour=(ut/100);
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     634:	70 93 4b 03 	sts	0x034B, r23
     638:	60 93 4a 03 	sts	0x034A, r22
	min=(ut%100);
     63c:	c9 01       	movw	r24, r18
     63e:	64 e6       	ldi	r22, 0x64	; 100
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     646:	90 93 64 03 	sts	0x0364, r25
     64a:	80 93 63 03 	sts	0x0363, r24
		
	if(ut<1200){
     64e:	20 5b       	subi	r18, 0xB0	; 176
     650:	34 40       	sbci	r19, 0x04	; 4
     652:	1c f4       	brge	.+6      	; 0x65a <utcToLocalTime+0x6c>
		memcpy(time_of_day,"AM",2);
     654:	81 e4       	ldi	r24, 0x41	; 65
     656:	9d e4       	ldi	r25, 0x4D	; 77
     658:	02 c0       	rjmp	.+4      	; 0x65e <utcToLocalTime+0x70>
	}
	else{
		memcpy(time_of_day,"PM",2);
     65a:	80 e5       	ldi	r24, 0x50	; 80
     65c:	9d e4       	ldi	r25, 0x4D	; 77
     65e:	90 93 22 03 	sts	0x0322, r25
     662:	80 93 21 03 	sts	0x0321, r24
	}		
		
	if(hour==0)hour=12;
     666:	80 91 4a 03 	lds	r24, 0x034A
     66a:	90 91 4b 03 	lds	r25, 0x034B
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	19 f4       	brne	.+6      	; 0x678 <utcToLocalTime+0x8a>
     672:	8c e0       	ldi	r24, 0x0C	; 12
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	04 c0       	rjmp	.+8      	; 0x680 <utcToLocalTime+0x92>
	else if(hour>12)hour-=12;
     678:	8d 30       	cpi	r24, 0x0D	; 13
     67a:	91 05       	cpc	r25, r1
     67c:	2c f0       	brlt	.+10     	; 0x688 <utcToLocalTime+0x9a>
     67e:	0c 97       	sbiw	r24, 0x0c	; 12
     680:	90 93 4b 03 	sts	0x034B, r25
     684:	80 93 4a 03 	sts	0x034A, r24
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	08 95       	ret

00000698 <cookLongitudeCoordinates>:
	lat_min=tempLat-(lat_deg*100);

	lat_decimal=(lat_deg+ (tempLat-(lat_deg*100))/60.0);
}

void cookLongitudeCoordinates(){
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
	double tempLon=atof(longitude);
     6a8:	86 e5       	ldi	r24, 0x56	; 86
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     6b0:	5b 01       	movw	r10, r22
     6b2:	6c 01       	movw	r12, r24
	lon_deg=floor(tempLon/100.00);
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	48 ec       	ldi	r20, 0xC8	; 200
     6ba:	52 e4       	ldi	r21, 0x42	; 66
     6bc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
     6c0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <floor>
     6c4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fixsfsi>
     6c8:	7b 01       	movw	r14, r22
     6ca:	70 93 ff 00 	sts	0x00FF, r23
     6ce:	60 93 fe 00 	sts	0x00FE, r22
	lon_min=tempLon-(lon_deg*100);
     6d2:	84 e6       	ldi	r24, 0x64	; 100
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	e8 9e       	mul	r14, r24
     6d8:	b0 01       	movw	r22, r0
     6da:	e9 9e       	mul	r14, r25
     6dc:	70 0d       	add	r23, r0
     6de:	f8 9e       	mul	r15, r24
     6e0:	70 0d       	add	r23, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	88 27       	eor	r24, r24
     6e6:	77 fd       	sbrc	r23, 7
     6e8:	80 95       	com	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__floatsisf>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	c6 01       	movw	r24, r12
     6f6:	b5 01       	movw	r22, r10
     6f8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__subsf3>
     6fc:	5b 01       	movw	r10, r22
     6fe:	6c 01       	movw	r12, r24
     700:	60 93 00 01 	sts	0x0100, r22
     704:	70 93 01 01 	sts	0x0101, r23
     708:	80 93 02 01 	sts	0x0102, r24
     70c:	90 93 03 01 	sts	0x0103, r25
		
	lon_decimal=(lon_deg+(tempLon-(lon_deg*100))/60.0);
     710:	00 27       	eor	r16, r16
     712:	f7 fc       	sbrc	r15, 7
     714:	00 95       	com	r16
     716:	10 2f       	mov	r17, r16
     718:	c8 01       	movw	r24, r16
     71a:	b7 01       	movw	r22, r14
     71c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__floatsisf>
     720:	7b 01       	movw	r14, r22
     722:	8c 01       	movw	r16, r24
     724:	c6 01       	movw	r24, r12
     726:	b5 01       	movw	r22, r10
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e7       	ldi	r20, 0x70	; 112
     72e:	52 e4       	ldi	r21, 0x42	; 66
     730:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c8 01       	movw	r24, r16
     73a:	b7 01       	movw	r22, r14
     73c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__addsf3>
     740:	60 93 0e 01 	sts	0x010E, r22
     744:	70 93 0f 01 	sts	0x010F, r23
     748:	80 93 10 01 	sts	0x0110, r24
     74c:	90 93 11 01 	sts	0x0111, r25
}
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	08 95       	ret

00000762 <cookLattitudeCoordinates>:

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
}

void cookLattitudeCoordinates(){
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
	double tempLat=atof(lattitude);
     772:	8c e4       	ldi	r24, 0x4C	; 76
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     77a:	5b 01       	movw	r10, r22
     77c:	6c 01       	movw	r12, r24
	lat_deg=floor(tempLat/100.00);
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	48 ec       	ldi	r20, 0xC8	; 200
     784:	52 e4       	ldi	r21, 0x42	; 66
     786:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
     78a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <floor>
     78e:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fixsfsi>
     792:	7b 01       	movw	r14, r22
     794:	70 93 05 01 	sts	0x0105, r23
     798:	60 93 04 01 	sts	0x0104, r22
	lat_min=tempLat-(lat_deg*100);
     79c:	84 e6       	ldi	r24, 0x64	; 100
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	e8 9e       	mul	r14, r24
     7a2:	b0 01       	movw	r22, r0
     7a4:	e9 9e       	mul	r14, r25
     7a6:	70 0d       	add	r23, r0
     7a8:	f8 9e       	mul	r15, r24
     7aa:	70 0d       	add	r23, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	88 27       	eor	r24, r24
     7b0:	77 fd       	sbrc	r23, 7
     7b2:	80 95       	com	r24
     7b4:	98 2f       	mov	r25, r24
     7b6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__floatsisf>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c6 01       	movw	r24, r12
     7c0:	b5 01       	movw	r22, r10
     7c2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__subsf3>
     7c6:	5b 01       	movw	r10, r22
     7c8:	6c 01       	movw	r12, r24
     7ca:	60 93 06 01 	sts	0x0106, r22
     7ce:	70 93 07 01 	sts	0x0107, r23
     7d2:	80 93 08 01 	sts	0x0108, r24
     7d6:	90 93 09 01 	sts	0x0109, r25

	lat_decimal=(lat_deg+ (tempLat-(lat_deg*100))/60.0);
     7da:	00 27       	eor	r16, r16
     7dc:	f7 fc       	sbrc	r15, 7
     7de:	00 95       	com	r16
     7e0:	10 2f       	mov	r17, r16
     7e2:	c8 01       	movw	r24, r16
     7e4:	b7 01       	movw	r22, r14
     7e6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__floatsisf>
     7ea:	7b 01       	movw	r14, r22
     7ec:	8c 01       	movw	r16, r24
     7ee:	c6 01       	movw	r24, r12
     7f0:	b5 01       	movw	r22, r10
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e7       	ldi	r20, 0x70	; 112
     7f8:	52 e4       	ldi	r21, 0x42	; 66
     7fa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
     7fe:	9b 01       	movw	r18, r22
     800:	ac 01       	movw	r20, r24
     802:	c8 01       	movw	r24, r16
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__addsf3>
     80a:	60 93 0a 01 	sts	0x010A, r22
     80e:	70 93 0b 01 	sts	0x010B, r23
     812:	80 93 0c 01 	sts	0x010C, r24
     816:	90 93 0d 01 	sts	0x010D, r25
}
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	08 95       	ret

0000082c <processRMC>:
	readNextParameter(geoidSeparationUnit,1);
	readNextParameter(tempBuffer,4);//skip DGPS field
	readNextParameter(tempBuffer,5);//skip DGPS field
}

void processRMC(){
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	27 97       	sbiw	r28, 0x07	; 7
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     848:	10 92 49 03 	sts	0x0349, r1
	//$msgID,utcTime,A forFix V for invalid fix,lat,maker,lon,marker,speed,heading,date,
	char temp[3];

	makeNullTerminating(temp,3);
	makeNullTerminating(utcTime,11);
	readNextParameter(utcTime,10);
     84c:	8f e3       	ldi	r24, 0x3F	; 63
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	6a e0       	ldi	r22, 0x0A	; 10
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     858:	10 92 62 03 	sts	0x0362, r1
	makeNullTerminating(utcTime,11);
	readNextParameter(utcTime,10);
	
	//Position validity	
	makeNullTerminating(fixMode,2);
	readNextParameter(fixMode,2);
     85c:	81 e6       	ldi	r24, 0x61	; 97
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     868:	10 92 55 03 	sts	0x0355, r1
	//Position validity	
	makeNullTerminating(fixMode,2);
	readNextParameter(fixMode,2);
		
	makeNullTerminating(lattitude,10);
	readNextParameter(lattitude,9);
     86c:	8c e4       	ldi	r24, 0x4C	; 76
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	69 e0       	ldi	r22, 0x09	; 9
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	cookLattitudeCoordinates();
     878:	0e 94 b1 03 	call	0x762	; 0x762 <cookLattitudeCoordinates>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     87c:	10 92 66 03 	sts	0x0366, r1
	makeNullTerminating(lattitude,10);
	readNextParameter(lattitude,9);
	cookLattitudeCoordinates();
	
	makeNullTerminating(lat_,2);
	readNextParameter(lat_,2);//N,S indicator
     880:	85 e6       	ldi	r24, 0x65	; 101
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     88c:	10 92 60 03 	sts	0x0360, r1
	
	makeNullTerminating(lat_,2);
	readNextParameter(lat_,2);//N,S indicator
		
	makeNullTerminating(longitude,11);
	readNextParameter(longitude,10);
     890:	86 e5       	ldi	r24, 0x56	; 86
     892:	93 e0       	ldi	r25, 0x03	; 3
     894:	6a e0       	ldi	r22, 0x0A	; 10
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	cookLongitudeCoordinates();
     89c:	0e 94 4c 03 	call	0x698	; 0x698 <cookLongitudeCoordinates>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     8a0:	10 92 38 03 	sts	0x0338, r1
	readNextParameter(longitude,10);
	cookLongitudeCoordinates();

	
	makeNullTerminating(lon_,2);
	readNextParameter(lon_,2);// E,W indicator
     8a4:	87 e3       	ldi	r24, 0x37	; 55
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
     8b0:	24 e2       	ldi	r18, 0x24	; 36
     8b2:	e2 2e       	mov	r14, r18
     8b4:	23 e0       	ldi	r18, 0x03	; 3
     8b6:	f2 2e       	mov	r15, r18
     8b8:	f7 01       	movw	r30, r14
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     8ba:	80 e2       	ldi	r24, 0x20	; 32
     8bc:	81 93       	st	Z+, r24
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	e2 33       	cpi	r30, 0x32	; 50
     8c2:	f9 07       	cpc	r31, r25
     8c4:	d9 f7       	brne	.-10     	; 0x8bc <__stack+0x5d>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     8c6:	10 82       	st	Z, r1
	readNextParameter(lon_,2);// E,W indicator
	
	
	clearBuffer(tempBuffer,15);
	makeNullTerminating(tempBuffer,15);
	readNextParameter(tempBuffer,5);
     8c8:	8f 01       	movw	r16, r30
     8ca:	0e 50       	subi	r16, 0x0E	; 14
     8cc:	10 40       	sbci	r17, 0x00	; 0
     8ce:	c8 01       	movw	r24, r16
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	speed=atof(tempBuffer);
     8d8:	c8 01       	movw	r24, r16
     8da:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     8de:	60 93 1a 01 	sts	0x011A, r22
     8e2:	70 93 1b 01 	sts	0x011B, r23
     8e6:	80 93 1c 01 	sts	0x011C, r24
     8ea:	90 93 1d 01 	sts	0x011D, r25
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     8ee:	80 e2       	ldi	r24, 0x20	; 32
     8f0:	f7 01       	movw	r30, r14
     8f2:	81 93       	st	Z+, r24
     8f4:	7f 01       	movw	r14, r30
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     8f6:	f2 e3       	ldi	r31, 0x32	; 50
     8f8:	ef 16       	cp	r14, r31
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	ff 06       	cpc	r15, r31
     8fe:	c1 f7       	brne	.-16     	; 0x8f0 <__stack+0x91>
	makeNullTerminating(tempBuffer,15);
	readNextParameter(tempBuffer,5);
	speed=atof(tempBuffer);
	
	clearBuffer(tempBuffer,15);
	readNextParameter(tempBuffer,5);
     900:	c7 01       	movw	r24, r14
     902:	0e 97       	sbiw	r24, 0x0e	; 14
     904:	65 e0       	ldi	r22, 0x05	; 5
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	course=atof(tempBuffer);
     90c:	c7 01       	movw	r24, r14
     90e:	0e 97       	sbiw	r24, 0x0e	; 14
     910:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     914:	60 93 16 01 	sts	0x0116, r22
     918:	70 93 17 01 	sts	0x0117, r23
     91c:	80 93 18 01 	sts	0x0118, r24
     920:	90 93 19 01 	sts	0x0119, r25
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     924:	1f 82       	std	Y+7, r1	; 0x07
	readNextParameter(tempBuffer,5);
	course=atof(tempBuffer);
	
	char date[7];
	makeNullTerminating(date,7);
	readNextParameter(date,6);
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	66 e0       	ldi	r22, 0x06	; 6
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	
}
     932:	27 96       	adiw	r28, 0x07	; 7
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <processGGA>:

void handleTimeOut(){
	current_state=Idle;
}

void processGGA(){
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	00 d0       	rcall	.+0      	; 0x95a <processGGA+0xe>
     95a:	0f 92       	push	r0
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     960:	1b 82       	std	Y+3, r1	; 0x03
	//$msgId,utcTime,Lat,marker,Lon,market,fixmode,satsUsed,HDOP,altitude,unit_altitude,geoid_separation,units,DGPSFiled,DGPSField*checksum (*18),<CR><LF>
	char temp[3];
	
	makeNullTerminating(temp,3);
	makeNullTerminating(utcTime,11);
	readNextParameter(utcTime,10);
     962:	10 92 49 03 	sts	0x0349, r1
     966:	8f e3       	ldi	r24, 0x3F	; 63
     968:	93 e0       	ldi	r25, 0x03	; 3
     96a:	6a e0       	ldi	r22, 0x0A	; 10
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     972:	10 92 55 03 	sts	0x0355, r1
	makeNullTerminating(temp,3);
	makeNullTerminating(utcTime,11);
	readNextParameter(utcTime,10);
	
	makeNullTerminating(lattitude,10);
	readNextParameter(lattitude,9);
     976:	8c e4       	ldi	r24, 0x4C	; 76
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	69 e0       	ldi	r22, 0x09	; 9
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	cookLattitudeCoordinates();
     982:	0e 94 b1 03 	call	0x762	; 0x762 <cookLattitudeCoordinates>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     986:	10 92 66 03 	sts	0x0366, r1
	makeNullTerminating(lattitude,10);
	readNextParameter(lattitude,9);
	cookLattitudeCoordinates();
	
	makeNullTerminating(lat_,2);
	readNextParameter(lat_,1);//N,S indicator
     98a:	85 e6       	ldi	r24, 0x65	; 101
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     996:	10 92 60 03 	sts	0x0360, r1
	
	makeNullTerminating(lat_,2);
	readNextParameter(lat_,1);//N,S indicator
		
	makeNullTerminating(longitude,11);
	readNextParameter(longitude,10);
     99a:	86 e5       	ldi	r24, 0x56	; 86
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	6a e0       	ldi	r22, 0x0A	; 10
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	cookLongitudeCoordinates();
     9a6:	0e 94 4c 03 	call	0x698	; 0x698 <cookLongitudeCoordinates>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     9aa:	10 92 38 03 	sts	0x0338, r1
	makeNullTerminating(longitude,11);
	readNextParameter(longitude,10);
	cookLongitudeCoordinates();

	makeNullTerminating(lon_,2);
	readNextParameter(lon_,1);// E,W indicator
     9ae:	87 e3       	ldi	r24, 0x37	; 55
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>

	skipNextParameter();//skip fixmode
     9ba:	0e 94 a4 02 	call	0x548	; 0x548 <skipNextParameter>
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     9be:	80 e2       	ldi	r24, 0x20	; 32
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	8a 83       	std	Y+2, r24	; 0x02
	readNextParameter(lon_,1);// E,W indicator

	skipNextParameter();//skip fixmode
	
	clearBuffer(temp,3);
	readNextParameter(temp,2);
     9c4:	8e 01       	movw	r16, r28
     9c6:	0f 5f       	subi	r16, 0xFF	; 255
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	c8 01       	movw	r24, r16
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	satsUsed=atoi(temp);
     9d4:	c8 01       	movw	r24, r16
     9d6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <atoi>
     9da:	90 93 13 01 	sts	0x0113, r25
     9de:	80 93 12 01 	sts	0x0112, r24
     9e2:	34 e2       	ldi	r19, 0x24	; 36
     9e4:	e3 2e       	mov	r14, r19
     9e6:	33 e0       	ldi	r19, 0x03	; 3
     9e8:	f3 2e       	mov	r15, r19
     9ea:	f7 01       	movw	r30, r14
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     9ec:	80 e2       	ldi	r24, 0x20	; 32
     9ee:	81 93       	st	Z+, r24
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	e2 33       	cpi	r30, 0x32	; 50
     9f4:	f9 07       	cpc	r31, r25
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <processGGA+0xa2>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     9f8:	10 82       	st	Z, r1
	readNextParameter(temp,2);
	satsUsed=atoi(temp);

	clearBuffer(tempBuffer,15);//ensure that i won't get strange values
	makeNullTerminating(tempBuffer,15);
	readNextParameter(tempBuffer,4); //HDOP
     9fa:	8f 01       	movw	r16, r30
     9fc:	0e 50       	subi	r16, 0x0E	; 14
     9fe:	10 40       	sbci	r17, 0x00	; 0
     a00:	c8 01       	movw	r24, r16
     a02:	64 e0       	ldi	r22, 0x04	; 4
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	HDOP=atof(tempBuffer);
     a0a:	c8 01       	movw	r24, r16
     a0c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     a10:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fixsfsi>
     a14:	70 93 15 01 	sts	0x0115, r23
     a18:	60 93 14 01 	sts	0x0114, r22
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	f8 01       	movw	r30, r16
     a20:	81 93       	st	Z+, r24
     a22:	8f 01       	movw	r16, r30
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	02 33       	cpi	r16, 0x32	; 50
     a28:	1f 07       	cpc	r17, r31
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <processGGA+0xd2>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     a2c:	10 92 32 03 	sts	0x0332, r1
	readNextParameter(tempBuffer,4); //HDOP
	HDOP=atof(tempBuffer);
	
	clearBuffer(tempBuffer,15);
	makeNullTerminating(tempBuffer,15);
	readNextParameter(tempBuffer,5);
     a30:	c8 01       	movw	r24, r16
     a32:	0e 97       	sbiw	r24, 0x0e	; 14
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	MSL_Altitude=(-1)*atof(tempBuffer);
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 97       	sbiw	r24, 0x0e	; 14
     a40:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     a44:	90 58       	subi	r25, 0x80	; 128
     a46:	60 93 33 03 	sts	0x0333, r22
     a4a:	70 93 34 03 	sts	0x0334, r23
     a4e:	80 93 35 03 	sts	0x0335, r24
     a52:	90 93 36 03 	sts	0x0336, r25
	
	readNextParameter(altitudeUnit,1);
     a56:	8f e1       	ldi	r24, 0x1F	; 31
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
		buffer[i]=' ';
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	f7 01       	movw	r30, r14
     a66:	81 93       	st	Z+, r24
     a68:	7f 01       	movw	r14, r30
	
}


void clearBuffer(char* buffer,short length){
	for(int i=0;i<length-1;i++){//do not clear the last position. it holds nul
     a6a:	f2 e3       	ldi	r31, 0x32	; 50
     a6c:	ef 16       	cp	r14, r31
     a6e:	f3 e0       	ldi	r31, 0x03	; 3
     a70:	ff 06       	cpc	r15, r31
     a72:	c1 f7       	brne	.-16     	; 0xa64 <processGGA+0x118>
	MSL_Altitude=(-1)*atof(tempBuffer);
	
	readNextParameter(altitudeUnit,1);
	
	clearBuffer(tempBuffer,15);
	readNextParameter(tempBuffer,4);
     a74:	c7 01       	movw	r24, r14
     a76:	0e 97       	sbiw	r24, 0x0e	; 14
     a78:	64 e0       	ldi	r22, 0x04	; 4
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	geoidSeperation=atof(tempBuffer);
     a80:	c7 01       	movw	r24, r14
     a82:	0e 97       	sbiw	r24, 0x0e	; 14
     a84:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atof>
     a88:	60 93 39 03 	sts	0x0339, r22
     a8c:	70 93 3a 03 	sts	0x033A, r23
     a90:	80 93 3b 03 	sts	0x033B, r24
     a94:	90 93 3c 03 	sts	0x033C, r25
	
	readNextParameter(geoidSeparationUnit,1);
     a98:	8d e3       	ldi	r24, 0x3D	; 61
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	readNextParameter(tempBuffer,4);//skip DGPS field
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 97       	sbiw	r24, 0x0e	; 14
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
	readNextParameter(tempBuffer,5);//skip DGPS field
     ab0:	c7 01       	movw	r24, r14
     ab2:	0e 97       	sbiw	r24, 0x0e	; 14
     ab4:	65 e0       	ldi	r22, 0x05	; 5
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	0e 94 ab 02 	call	0x556	; 0x556 <readNextParameter>
}
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <displayData>:
	//current_state=DisplayData;
//}

void displayData(){
			
		if(flag==1){
     ad0:	80 91 60 00 	lds	r24, 0x0060
     ad4:	90 91 61 00 	lds	r25, 0x0061
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	91 05       	cpc	r25, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <displayData+0x10>
     ade:	3f c0       	rjmp	.+126    	; 0xb5e <displayData+0x8e>
			if(buttonChanged){
     ae0:	80 91 fc 00 	lds	r24, 0x00FC
     ae4:	90 91 fd 00 	lds	r25, 0x00FD
     ae8:	89 2b       	or	r24, r25
     aea:	e1 f0       	breq	.+56     	; 0xb24 <displayData+0x54>
				clearDisplay(1,5,16);//Clear lattitude field
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	65 e0       	ldi	r22, 0x05	; 5
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	40 e1       	ldi	r20, 0x10	; 16
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				clearDisplay(2,5,16);//clear longitude field
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	65 e0       	ldi	r22, 0x05	; 5
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	40 e1       	ldi	r20, 0x10	; 16
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				clearDisplay(4,1,16);//Clear the last row of the LCD
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	40 e1       	ldi	r20, 0x10	; 16
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				buttonChanged=0;
     b1c:	10 92 fd 00 	sts	0x00FD, r1
     b20:	10 92 fc 00 	sts	0x00FC, r1
			}	
		displayDecimalLattitude();
     b24:	0e 94 b3 07 	call	0xf66	; 0xf66 <displayDecimalLattitude>
		displayDecimalLongitude();
     b28:	0e 94 61 07 	call	0xec2	; 0xec2 <displayDecimalLongitude>
		displayLocalTimeAtColRow(1,4);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	64 e0       	ldi	r22, 0x04	; 4
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 da 08 	call	0x11b4	; 0x11b4 <displayLocalTimeAtColRow>
		displaySatsUsed(9,4);
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	64 e0       	ldi	r22, 0x04	; 4
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	0e 94 1c 07 	call	0xe38	; 0xe38 <displaySatsUsed>
		displayFixMode(16,3);
     b44:	80 e1       	ldi	r24, 0x10	; 16
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	63 e0       	ldi	r22, 0x03	; 3
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0e 94 b1 08 	call	0x1162	; 0x1162 <displayFixMode>
		displayVerticalSpeedAtColRow(5,3);
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayVerticalSpeedAtColRow>
     b5c:	34 c0       	rjmp	.+104    	; 0xbc6 <displayData+0xf6>
		}else if(flag==2){
     b5e:	02 97       	sbiw	r24, 0x02	; 2
     b60:	91 f5       	brne	.+100    	; 0xbc6 <displayData+0xf6>
			if(buttonChanged){
     b62:	80 91 fc 00 	lds	r24, 0x00FC
     b66:	90 91 fd 00 	lds	r25, 0x00FD
     b6a:	89 2b       	or	r24, r25
     b6c:	e1 f0       	breq	.+56     	; 0xba6 <displayData+0xd6>
				clearDisplay(1,5,16);//Clear lattitude field
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	40 e1       	ldi	r20, 0x10	; 16
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				clearDisplay(2,5,16);//clear longitude field
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	65 e0       	ldi	r22, 0x05	; 5
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	40 e1       	ldi	r20, 0x10	; 16
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				clearDisplay(4,1,16);//Clear the last row of the LCD
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	40 e1       	ldi	r20, 0x10	; 16
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	0e 94 11 02 	call	0x422	; 0x422 <clearDisplay>
				buttonChanged=0;
     b9e:	10 92 fd 00 	sts	0x00FD, r1
     ba2:	10 92 fc 00 	sts	0x00FC, r1
			}
			displayLattitudeDegressMinutes();
     ba6:	0e 94 c4 06 	call	0xd88	; 0xd88 <displayLattitudeDegressMinutes>
			displayLongitudeDegressMinutes();
     baa:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <displayLongitudeDegressMinutes>
			displayHeadingAt(1,3);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	63 e0       	ldi	r22, 0x03	; 3
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <displayHeadingAt>
			displayAltitudeAt(1,4);
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	64 e0       	ldi	r22, 0x04	; 4
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	0e 94 05 08 	call	0x100a	; 0x100a <displayAltitudeAt>
		}	
		
		
		current_state=Idle;
     bc6:	10 92 1e 01 	sts	0x011E, r1
}
     bca:	08 95       	ret

00000bcc <retrieveSentenceData>:
	readNextParameter(msgID,5);
	current_state=RetrieveSentenceData;
}

void retrieveSentenceData(){
	if(strcmp(msgID,"GPRMC")==0){//processRMC
     bcc:	87 e6       	ldi	r24, 0x67	; 103
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	64 e6       	ldi	r22, 0x64	; 100
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	0e 94 80 10 	call	0x2100	; 0x2100 <strcmp>
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	19 f4       	brne	.+6      	; 0xbe2 <retrieveSentenceData+0x16>
		processRMC();
     bdc:	0e 94 16 04 	call	0x82c	; 0x82c <processRMC>
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <retrieveSentenceData+0x2a>
	}else if(strcmp(msgID,"GPGGA")==0){//processGGA
     be2:	87 e6       	ldi	r24, 0x67	; 103
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	6a e6       	ldi	r22, 0x6A	; 106
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	0e 94 80 10 	call	0x2100	; 0x2100 <strcmp>
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <retrieveSentenceData+0x2a>
		processGGA();
     bf2:	0e 94 a6 04 	call	0x94c	; 0x94c <processGGA>
	}		
	current_state=DisplayData;	
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	80 93 1e 01 	sts	0x011E, r24
}
     bfc:	08 95       	ret

00000bfe <init_NMEA_FSM>:
} State;

static State current_state;

void init_NMEA_FSM(){
	current_state=Idle;
     bfe:	10 92 1e 01 	sts	0x011E, r1
	lcdUI1();
     c02:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <lcdUI1>
		temp=readFromBuffer();		
	}
}

void makeNullTerminating(char* str,int length){
	str[length-1]='\0';
     c06:	10 92 6c 03 	sts	0x036C, r1
	current_state=Idle;
	lcdUI1();
	makeNullTerminating(msgID,6);
	
	while(1){
		switch(current_state){
     c0a:	80 91 1e 01 	lds	r24, 0x011E
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	51 f0       	breq	.+20     	; 0xc26 <init_NMEA_FSM+0x28>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	28 f0       	brcs	.+10     	; 0xc20 <init_NMEA_FSM+0x22>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	49 f0       	breq	.+18     	; 0xc2c <init_NMEA_FSM+0x2e>
     c1a:	86 30       	cpi	r24, 0x06	; 6
     c1c:	c1 f7       	brne	.-16     	; 0xc0e <init_NMEA_FSM+0x10>
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <init_NMEA_FSM+0x34>
			case Idle:
			idle();
     c20:	0e 94 ef 02 	call	0x5de	; 0x5de <idle>
     c24:	f2 cf       	rjmp	.-28     	; 0xc0a <init_NMEA_FSM+0xc>
			break;
			case RetrieveMsgID:
			retrieveMsgId();
     c26:	0e 94 e5 02 	call	0x5ca	; 0x5ca <retrieveMsgId>
     c2a:	ef cf       	rjmp	.-34     	; 0xc0a <init_NMEA_FSM+0xc>
			break;
			case RetrieveSentenceData:
			retrieveSentenceData();
     c2c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <retrieveSentenceData>
     c30:	ec cf       	rjmp	.-40     	; 0xc0a <init_NMEA_FSM+0xc>
			//retrieveEndOfSentence();
			break;
			case WaitForNextMessage:
			break;
			case DisplayData:
			displayData();
     c32:	0e 94 68 05 	call	0xad0	; 0xad0 <displayData>
     c36:	e9 cf       	rjmp	.-46     	; 0xc0a <init_NMEA_FSM+0xc>

00000c38 <displayVerticalSpeedAtColRow>:
	
	sprintf(buff,"%2d%c%6.4f'%s",lon_deg,c,lon_min,lon_);
	write_HD44780_DataAtRowCol(2,5,buff);
}

void displayVerticalSpeedAtColRow(short col,short row){
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	2f 97       	sbiw	r28, 0x0f	; 15
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	e8 2e       	mov	r14, r24
     c56:	f6 2e       	mov	r15, r22
	char buff[15];
	sprintf(buff,"%.2f",speed);
     c58:	8d b7       	in	r24, 0x3d	; 61
     c5a:	9e b7       	in	r25, 0x3e	; 62
     c5c:	08 97       	sbiw	r24, 0x08	; 8
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	9e bf       	out	0x3e, r25	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	8d bf       	out	0x3d, r24	; 61
     c68:	ed b7       	in	r30, 0x3d	; 61
     c6a:	fe b7       	in	r31, 0x3e	; 62
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	8e 01       	movw	r16, r28
     c70:	0f 5f       	subi	r16, 0xFF	; 255
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	ad b7       	in	r26, 0x3d	; 61
     c76:	be b7       	in	r27, 0x3e	; 62
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	1c 93       	st	X, r17
     c7c:	0e 93       	st	-X, r16
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	80 e7       	ldi	r24, 0x70	; 112
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	93 83       	std	Z+3, r25	; 0x03
     c86:	82 83       	std	Z+2, r24	; 0x02
     c88:	80 91 1a 01 	lds	r24, 0x011A
     c8c:	90 91 1b 01 	lds	r25, 0x011B
     c90:	a0 91 1c 01 	lds	r26, 0x011C
     c94:	b0 91 1d 01 	lds	r27, 0x011D
     c98:	84 83       	std	Z+4, r24	; 0x04
     c9a:	95 83       	std	Z+5, r25	; 0x05
     c9c:	a6 83       	std	Z+6, r26	; 0x06
     c9e:	b7 83       	std	Z+7, r27	; 0x07
     ca0:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(row,col,buff);
     ca4:	8d b7       	in	r24, 0x3d	; 61
     ca6:	9e b7       	in	r25, 0x3e	; 62
     ca8:	08 96       	adiw	r24, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	9e bf       	out	0x3e, r25	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	8d bf       	out	0x3d, r24	; 61
     cb4:	8f 2d       	mov	r24, r15
     cb6:	6e 2d       	mov	r22, r14
     cb8:	a8 01       	movw	r20, r16
     cba:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
     cbe:	2f 96       	adiw	r28, 0x0f	; 15
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	08 95       	ret

00000cd8 <displayLongitudeDegressMinutes>:
	char buff[17];	
	sprintf(buff,"%2d%c%6.4f'%s",lat_deg,c,lat_min,lat_);	
	write_HD44780_DataAtRowCol(1,5,buff);
}

void displayLongitudeDegressMinutes(){
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	61 97       	sbiw	r28, 0x11	; 17
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
	char buff[17];	
	
	sprintf(buff,"%2d%c%6.4f'%s",lon_deg,c,lon_min,lon_);
     cf0:	8d b7       	in	r24, 0x3d	; 61
     cf2:	9e b7       	in	r25, 0x3e	; 62
     cf4:	0e 97       	sbiw	r24, 0x0e	; 14
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	9e bf       	out	0x3e, r25	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	8d bf       	out	0x3d, r24	; 61
     d00:	ed b7       	in	r30, 0x3d	; 61
     d02:	fe b7       	in	r31, 0x3e	; 62
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	8e 01       	movw	r16, r28
     d08:	0f 5f       	subi	r16, 0xFF	; 255
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	ad b7       	in	r26, 0x3d	; 61
     d0e:	be b7       	in	r27, 0x3e	; 62
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	1c 93       	st	X, r17
     d14:	0e 93       	st	-X, r16
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	85 e7       	ldi	r24, 0x75	; 117
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	93 83       	std	Z+3, r25	; 0x03
     d1e:	82 83       	std	Z+2, r24	; 0x02
     d20:	80 91 fe 00 	lds	r24, 0x00FE
     d24:	90 91 ff 00 	lds	r25, 0x00FF
     d28:	95 83       	std	Z+5, r25	; 0x05
     d2a:	84 83       	std	Z+4, r24	; 0x04
     d2c:	80 91 ec 00 	lds	r24, 0x00EC
     d30:	86 83       	std	Z+6, r24	; 0x06
     d32:	17 82       	std	Z+7, r1	; 0x07
     d34:	80 91 00 01 	lds	r24, 0x0100
     d38:	90 91 01 01 	lds	r25, 0x0101
     d3c:	a0 91 02 01 	lds	r26, 0x0102
     d40:	b0 91 03 01 	lds	r27, 0x0103
     d44:	80 87       	std	Z+8, r24	; 0x08
     d46:	91 87       	std	Z+9, r25	; 0x09
     d48:	a2 87       	std	Z+10, r26	; 0x0a
     d4a:	b3 87       	std	Z+11, r27	; 0x0b
     d4c:	87 e3       	ldi	r24, 0x37	; 55
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	95 87       	std	Z+13, r25	; 0x0d
     d52:	84 87       	std	Z+12, r24	; 0x0c
     d54:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(2,5,buff);
     d58:	8d b7       	in	r24, 0x3d	; 61
     d5a:	9e b7       	in	r25, 0x3e	; 62
     d5c:	0e 96       	adiw	r24, 0x0e	; 14
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	9e bf       	out	0x3e, r25	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	8d bf       	out	0x3d, r24	; 61
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	65 e0       	ldi	r22, 0x05	; 5
     d6c:	a8 01       	movw	r20, r16
     d6e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
     d72:	61 96       	adiw	r28, 0x11	; 17
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <displayLattitudeDegressMinutes>:
	char buff[7];
	sprintf(buff,"Sats:%d",satsUsed);
	write_HD44780_DataAtRowCol(row,col,buff);
}

void displayLattitudeDegressMinutes(){
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	61 97       	sbiw	r28, 0x11	; 17
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
	char buff[17];	
	sprintf(buff,"%2d%c%6.4f'%s",lat_deg,c,lat_min,lat_);	
     da0:	8d b7       	in	r24, 0x3d	; 61
     da2:	9e b7       	in	r25, 0x3e	; 62
     da4:	0e 97       	sbiw	r24, 0x0e	; 14
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	9e bf       	out	0x3e, r25	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	8d bf       	out	0x3d, r24	; 61
     db0:	ed b7       	in	r30, 0x3d	; 61
     db2:	fe b7       	in	r31, 0x3e	; 62
     db4:	31 96       	adiw	r30, 0x01	; 1
     db6:	8e 01       	movw	r16, r28
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	ad b7       	in	r26, 0x3d	; 61
     dbe:	be b7       	in	r27, 0x3e	; 62
     dc0:	12 96       	adiw	r26, 0x02	; 2
     dc2:	1c 93       	st	X, r17
     dc4:	0e 93       	st	-X, r16
     dc6:	11 97       	sbiw	r26, 0x01	; 1
     dc8:	85 e7       	ldi	r24, 0x75	; 117
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	93 83       	std	Z+3, r25	; 0x03
     dce:	82 83       	std	Z+2, r24	; 0x02
     dd0:	80 91 04 01 	lds	r24, 0x0104
     dd4:	90 91 05 01 	lds	r25, 0x0105
     dd8:	95 83       	std	Z+5, r25	; 0x05
     dda:	84 83       	std	Z+4, r24	; 0x04
     ddc:	80 91 ec 00 	lds	r24, 0x00EC
     de0:	86 83       	std	Z+6, r24	; 0x06
     de2:	17 82       	std	Z+7, r1	; 0x07
     de4:	80 91 06 01 	lds	r24, 0x0106
     de8:	90 91 07 01 	lds	r25, 0x0107
     dec:	a0 91 08 01 	lds	r26, 0x0108
     df0:	b0 91 09 01 	lds	r27, 0x0109
     df4:	80 87       	std	Z+8, r24	; 0x08
     df6:	91 87       	std	Z+9, r25	; 0x09
     df8:	a2 87       	std	Z+10, r26	; 0x0a
     dfa:	b3 87       	std	Z+11, r27	; 0x0b
     dfc:	85 e6       	ldi	r24, 0x65	; 101
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	95 87       	std	Z+13, r25	; 0x0d
     e02:	84 87       	std	Z+12, r24	; 0x0c
     e04:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(1,5,buff);
     e08:	8d b7       	in	r24, 0x3d	; 61
     e0a:	9e b7       	in	r25, 0x3e	; 62
     e0c:	0e 96       	adiw	r24, 0x0e	; 14
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	9e bf       	out	0x3e, r25	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	8d bf       	out	0x3d, r24	; 61
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	65 e0       	ldi	r22, 0x05	; 5
     e1c:	a8 01       	movw	r20, r16
     e1e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
     e22:	61 96       	adiw	r28, 0x11	; 17
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <displaySatsUsed>:
	else sprintf(buff,"N");
				
	write_HD44780_DataAtRowCol(row,col,buff);
}

void displaySatsUsed(short col,short row){
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	27 97       	sbiw	r28, 0x07	; 7
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	e8 2e       	mov	r14, r24
     e56:	f6 2e       	mov	r15, r22
	char buff[7];
	sprintf(buff,"Sats:%d",satsUsed);
     e58:	00 d0       	rcall	.+0      	; 0xe5a <displaySatsUsed+0x22>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <displaySatsUsed+0x24>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <displaySatsUsed+0x26>
     e5e:	ed b7       	in	r30, 0x3d	; 61
     e60:	fe b7       	in	r31, 0x3e	; 62
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	8e 01       	movw	r16, r28
     e66:	0f 5f       	subi	r16, 0xFF	; 255
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	ad b7       	in	r26, 0x3d	; 61
     e6c:	be b7       	in	r27, 0x3e	; 62
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	1c 93       	st	X, r17
     e72:	0e 93       	st	-X, r16
     e74:	11 97       	sbiw	r26, 0x01	; 1
     e76:	83 e8       	ldi	r24, 0x83	; 131
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	93 83       	std	Z+3, r25	; 0x03
     e7c:	82 83       	std	Z+2, r24	; 0x02
     e7e:	80 91 12 01 	lds	r24, 0x0112
     e82:	90 91 13 01 	lds	r25, 0x0113
     e86:	95 83       	std	Z+5, r25	; 0x05
     e88:	84 83       	std	Z+4, r24	; 0x04
     e8a:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(row,col,buff);
     e8e:	8d b7       	in	r24, 0x3d	; 61
     e90:	9e b7       	in	r25, 0x3e	; 62
     e92:	06 96       	adiw	r24, 0x06	; 6
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	9e bf       	out	0x3e, r25	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	8d bf       	out	0x3d, r24	; 61
     e9e:	8f 2d       	mov	r24, r15
     ea0:	6e 2d       	mov	r22, r14
     ea2:	a8 01       	movw	r20, r16
     ea4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
     ea8:	27 96       	adiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <displayDecimalLongitude>:
	char buff[12];	
	sprintf(buff,"%9.7f%c%s",lat_decimal,c,lat_);	
	write_HD44780_DataAtRowCol(1,5,buff);
}

void displayDecimalLongitude(){
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	2c 97       	sbiw	r28, 0x0c	; 12
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
	char buff[12];	
	sprintf(buff,"%9.7f%c%s",lon_decimal,c,lon_);	
     eda:	8d b7       	in	r24, 0x3d	; 61
     edc:	9e b7       	in	r25, 0x3e	; 62
     ede:	0c 97       	sbiw	r24, 0x0c	; 12
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	9e bf       	out	0x3e, r25	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	8d bf       	out	0x3d, r24	; 61
     eea:	ed b7       	in	r30, 0x3d	; 61
     eec:	fe b7       	in	r31, 0x3e	; 62
     eee:	31 96       	adiw	r30, 0x01	; 1
     ef0:	8e 01       	movw	r16, r28
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	ad b7       	in	r26, 0x3d	; 61
     ef8:	be b7       	in	r27, 0x3e	; 62
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	1c 93       	st	X, r17
     efe:	0e 93       	st	-X, r16
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	8b e8       	ldi	r24, 0x8B	; 139
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	93 83       	std	Z+3, r25	; 0x03
     f08:	82 83       	std	Z+2, r24	; 0x02
     f0a:	80 91 0e 01 	lds	r24, 0x010E
     f0e:	90 91 0f 01 	lds	r25, 0x010F
     f12:	a0 91 10 01 	lds	r26, 0x0110
     f16:	b0 91 11 01 	lds	r27, 0x0111
     f1a:	84 83       	std	Z+4, r24	; 0x04
     f1c:	95 83       	std	Z+5, r25	; 0x05
     f1e:	a6 83       	std	Z+6, r26	; 0x06
     f20:	b7 83       	std	Z+7, r27	; 0x07
     f22:	80 91 ec 00 	lds	r24, 0x00EC
     f26:	80 87       	std	Z+8, r24	; 0x08
     f28:	11 86       	std	Z+9, r1	; 0x09
     f2a:	87 e3       	ldi	r24, 0x37	; 55
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	93 87       	std	Z+11, r25	; 0x0b
     f30:	82 87       	std	Z+10, r24	; 0x0a
     f32:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(2,5,buff);
     f36:	8d b7       	in	r24, 0x3d	; 61
     f38:	9e b7       	in	r25, 0x3e	; 62
     f3a:	0c 96       	adiw	r24, 0x0c	; 12
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	9e bf       	out	0x3e, r25	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	8d bf       	out	0x3d, r24	; 61
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	65 e0       	ldi	r22, 0x05	; 5
     f4a:	a8 01       	movw	r20, r16
     f4c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
     f50:	2c 96       	adiw	r28, 0x0c	; 12
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <displayDecimalLattitude>:
			sprintf(buff,"%d:%d%s",hour,min,time_of_day);
		}							
		write_HD44780_DataAtRowCol(row,col,buff);		
}

void displayDecimalLattitude(){
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	2c 97       	sbiw	r28, 0x0c	; 12
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
	char buff[12];	
	sprintf(buff,"%9.7f%c%s",lat_decimal,c,lat_);	
     f7e:	8d b7       	in	r24, 0x3d	; 61
     f80:	9e b7       	in	r25, 0x3e	; 62
     f82:	0c 97       	sbiw	r24, 0x0c	; 12
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	9e bf       	out	0x3e, r25	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	8d bf       	out	0x3d, r24	; 61
     f8e:	ed b7       	in	r30, 0x3d	; 61
     f90:	fe b7       	in	r31, 0x3e	; 62
     f92:	31 96       	adiw	r30, 0x01	; 1
     f94:	8e 01       	movw	r16, r28
     f96:	0f 5f       	subi	r16, 0xFF	; 255
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	ad b7       	in	r26, 0x3d	; 61
     f9c:	be b7       	in	r27, 0x3e	; 62
     f9e:	12 96       	adiw	r26, 0x02	; 2
     fa0:	1c 93       	st	X, r17
     fa2:	0e 93       	st	-X, r16
     fa4:	11 97       	sbiw	r26, 0x01	; 1
     fa6:	8b e8       	ldi	r24, 0x8B	; 139
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	93 83       	std	Z+3, r25	; 0x03
     fac:	82 83       	std	Z+2, r24	; 0x02
     fae:	80 91 0a 01 	lds	r24, 0x010A
     fb2:	90 91 0b 01 	lds	r25, 0x010B
     fb6:	a0 91 0c 01 	lds	r26, 0x010C
     fba:	b0 91 0d 01 	lds	r27, 0x010D
     fbe:	84 83       	std	Z+4, r24	; 0x04
     fc0:	95 83       	std	Z+5, r25	; 0x05
     fc2:	a6 83       	std	Z+6, r26	; 0x06
     fc4:	b7 83       	std	Z+7, r27	; 0x07
     fc6:	80 91 ec 00 	lds	r24, 0x00EC
     fca:	80 87       	std	Z+8, r24	; 0x08
     fcc:	11 86       	std	Z+9, r1	; 0x09
     fce:	85 e6       	ldi	r24, 0x65	; 101
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	93 87       	std	Z+11, r25	; 0x0b
     fd4:	82 87       	std	Z+10, r24	; 0x0a
     fd6:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(1,5,buff);
     fda:	8d b7       	in	r24, 0x3d	; 61
     fdc:	9e b7       	in	r25, 0x3e	; 62
     fde:	0c 96       	adiw	r24, 0x0c	; 12
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	9e bf       	out	0x3e, r25	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	8d bf       	out	0x3d, r24	; 61
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	65 e0       	ldi	r22, 0x05	; 5
     fee:	a8 01       	movw	r20, r16
     ff0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
     ff4:	2c 96       	adiw	r28, 0x0c	; 12
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <displayAltitudeAt>:
	char buff[10];
	sprintf(buff,"%s%4.1f%c",strCourse,course,c);
	write_HD44780_DataAtRowCol(row,col,buff);
}

void displayAltitudeAt(short col, short row){
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	2a 97       	sbiw	r28, 0x0a	; 10
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	e8 2e       	mov	r14, r24
    1028:	f6 2e       	mov	r15, r22
	char buff[10];
	sprintf(buff,"%s%4.1fm",strAltitude,MSL_Altitude);
    102a:	8d b7       	in	r24, 0x3d	; 61
    102c:	9e b7       	in	r25, 0x3e	; 62
    102e:	0a 97       	sbiw	r24, 0x0a	; 10
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	9e bf       	out	0x3e, r25	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	8d bf       	out	0x3d, r24	; 61
    103a:	ed b7       	in	r30, 0x3d	; 61
    103c:	fe b7       	in	r31, 0x3e	; 62
    103e:	31 96       	adiw	r30, 0x01	; 1
    1040:	8e 01       	movw	r16, r28
    1042:	0f 5f       	subi	r16, 0xFF	; 255
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	ad b7       	in	r26, 0x3d	; 61
    1048:	be b7       	in	r27, 0x3e	; 62
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	1c 93       	st	X, r17
    104e:	0e 93       	st	-X, r16
    1050:	11 97       	sbiw	r26, 0x01	; 1
    1052:	85 e9       	ldi	r24, 0x95	; 149
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	82 ef       	ldi	r24, 0xF2	; 242
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	95 83       	std	Z+5, r25	; 0x05
    1060:	84 83       	std	Z+4, r24	; 0x04
    1062:	80 91 33 03 	lds	r24, 0x0333
    1066:	90 91 34 03 	lds	r25, 0x0334
    106a:	a0 91 35 03 	lds	r26, 0x0335
    106e:	b0 91 36 03 	lds	r27, 0x0336
    1072:	86 83       	std	Z+6, r24	; 0x06
    1074:	97 83       	std	Z+7, r25	; 0x07
    1076:	a0 87       	std	Z+8, r26	; 0x08
    1078:	b1 87       	std	Z+9, r27	; 0x09
    107a:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(row,col,buff);
    107e:	8d b7       	in	r24, 0x3d	; 61
    1080:	9e b7       	in	r25, 0x3e	; 62
    1082:	0a 96       	adiw	r24, 0x0a	; 10
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	9e bf       	out	0x3e, r25	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	8d bf       	out	0x3d, r24	; 61
    108e:	8f 2d       	mov	r24, r15
    1090:	6e 2d       	mov	r22, r14
    1092:	a8 01       	movw	r20, r16
    1094:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
    1098:	2a 96       	adiw	r28, 0x0a	; 10
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	08 95       	ret

000010b2 <displayHeadingAt>:
	write_HD44780_DataAtRowCol(3,1,strSpeed);
	write_HD44780_DataAtRowCol(3,12,strFix);
	//write_HD44780_DataAtRowCol(4,1,strCourse);
}

void displayHeadingAt(short col,short row){
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	2a 97       	sbiw	r28, 0x0a	; 10
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	e8 2e       	mov	r14, r24
    10d0:	f6 2e       	mov	r15, r22
	char buff[10];
	sprintf(buff,"%s%4.1f%c",strCourse,course,c);
    10d2:	8d b7       	in	r24, 0x3d	; 61
    10d4:	9e b7       	in	r25, 0x3e	; 62
    10d6:	0c 97       	sbiw	r24, 0x0c	; 12
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	9e bf       	out	0x3e, r25	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	8d bf       	out	0x3d, r24	; 61
    10e2:	ed b7       	in	r30, 0x3d	; 61
    10e4:	fe b7       	in	r31, 0x3e	; 62
    10e6:	31 96       	adiw	r30, 0x01	; 1
    10e8:	8e 01       	movw	r16, r28
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	ad b7       	in	r26, 0x3d	; 61
    10f0:	be b7       	in	r27, 0x3e	; 62
    10f2:	12 96       	adiw	r26, 0x02	; 2
    10f4:	1c 93       	st	X, r17
    10f6:	0e 93       	st	-X, r16
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	8e e9       	ldi	r24, 0x9E	; 158
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	93 83       	std	Z+3, r25	; 0x03
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	8d ee       	ldi	r24, 0xED	; 237
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	95 83       	std	Z+5, r25	; 0x05
    1108:	84 83       	std	Z+4, r24	; 0x04
    110a:	80 91 16 01 	lds	r24, 0x0116
    110e:	90 91 17 01 	lds	r25, 0x0117
    1112:	a0 91 18 01 	lds	r26, 0x0118
    1116:	b0 91 19 01 	lds	r27, 0x0119
    111a:	86 83       	std	Z+6, r24	; 0x06
    111c:	97 83       	std	Z+7, r25	; 0x07
    111e:	a0 87       	std	Z+8, r26	; 0x08
    1120:	b1 87       	std	Z+9, r27	; 0x09
    1122:	80 91 ec 00 	lds	r24, 0x00EC
    1126:	82 87       	std	Z+10, r24	; 0x0a
    1128:	13 86       	std	Z+11, r1	; 0x0b
    112a:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
	write_HD44780_DataAtRowCol(row,col,buff);
    112e:	8d b7       	in	r24, 0x3d	; 61
    1130:	9e b7       	in	r25, 0x3e	; 62
    1132:	0c 96       	adiw	r24, 0x0c	; 12
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	9e bf       	out	0x3e, r25	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	8d bf       	out	0x3d, r24	; 61
    113e:	8f 2d       	mov	r24, r15
    1140:	6e 2d       	mov	r22, r14
    1142:	a8 01       	movw	r20, r16
    1144:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
    1148:	2a 96       	adiw	r28, 0x0a	; 10
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	08 95       	ret

00001162 <displayFixMode>:
	char buff[12];	
	sprintf(buff,"%9.7f%c%s",lon_decimal,c,lon_);	
	write_HD44780_DataAtRowCol(2,5,buff);
}

void displayFixMode(short col,short row){
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <displayFixMode+0xa>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	08 2f       	mov	r16, r24
    1172:	16 2f       	mov	r17, r22
	char buff[2];
		
	if(!strcmp(fixMode,"A"))sprintf(buff,"Y");
    1174:	81 e6       	ldi	r24, 0x61	; 97
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	68 ea       	ldi	r22, 0xA8	; 168
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	0e 94 80 10 	call	0x2100	; 0x2100 <strcmp>
    1180:	9c 01       	movw	r18, r24
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	23 2b       	or	r18, r19
    1188:	19 f4       	brne	.+6      	; 0x1190 <displayFixMode+0x2e>
    118a:	6a ea       	ldi	r22, 0xAA	; 170
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <displayFixMode+0x32>
	else sprintf(buff,"N");
    1190:	6c ea       	ldi	r22, 0xAC	; 172
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	0e 94 89 10 	call	0x2112	; 0x2112 <strcpy>
				
	write_HD44780_DataAtRowCol(row,col,buff);
    1198:	81 2f       	mov	r24, r17
    119a:	60 2f       	mov	r22, r16
    119c:	ae 01       	movw	r20, r28
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <displayLocalTimeAtColRow>:
	char buff[10];
	sprintf(buff,"%s%4.1fm",strAltitude,MSL_Altitude);
	write_HD44780_DataAtRowCol(row,col,buff);
}

void displayLocalTimeAtColRow(short col,short row){
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <displayLocalTimeAtColRow+0xa>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <displayLocalTimeAtColRow+0xc>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <displayLocalTimeAtColRow+0xe>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	08 2f       	mov	r16, r24
    11c8:	16 2f       	mov	r17, r22
		utcToLocalTime();
    11ca:	0e 94 f7 02 	call	0x5ee	; 0x5ee <utcToLocalTime>
		char buff[6];
		buff[5]='\0';
    11ce:	1e 82       	std	Y+6, r1	; 0x06
		
		if(hour<10 && min<10){
    11d0:	40 91 4a 03 	lds	r20, 0x034A
    11d4:	50 91 4b 03 	lds	r21, 0x034B
    11d8:	20 91 63 03 	lds	r18, 0x0363
    11dc:	30 91 64 03 	lds	r19, 0x0364
    11e0:	4a 30       	cpi	r20, 0x0A	; 10
    11e2:	51 05       	cpc	r21, r1
    11e4:	5c f5       	brge	.+86     	; 0x123c <displayLocalTimeAtColRow+0x88>
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	61 e2       	ldi	r22, 0x21	; 33
    11ec:	73 e0       	ldi	r23, 0x03	; 3
    11ee:	2a 30       	cpi	r18, 0x0A	; 10
    11f0:	31 05       	cpc	r19, r1
    11f2:	94 f4       	brge	.+36     	; 0x1218 <displayLocalTimeAtColRow+0x64>
			sprintf(buff,"0%d:0%d%s",hour,min,time_of_day);
    11f4:	ad b7       	in	r26, 0x3d	; 61
    11f6:	be b7       	in	r27, 0x3e	; 62
    11f8:	1a 97       	sbiw	r26, 0x0a	; 10
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	be bf       	out	0x3e, r27	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	ad bf       	out	0x3d, r26	; 61
    1204:	ed b7       	in	r30, 0x3d	; 61
    1206:	fe b7       	in	r31, 0x3e	; 62
    1208:	31 96       	adiw	r30, 0x01	; 1
    120a:	12 96       	adiw	r26, 0x02	; 2
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
    1210:	11 97       	sbiw	r26, 0x01	; 1
    1212:	8e ea       	ldi	r24, 0xAE	; 174
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	3c c0       	rjmp	.+120    	; 0x1290 <displayLocalTimeAtColRow+0xdc>
		}else if(hour<10){
			sprintf(buff,"0%d:%d%s",hour,min,time_of_day);
    1218:	ad b7       	in	r26, 0x3d	; 61
    121a:	be b7       	in	r27, 0x3e	; 62
    121c:	1a 97       	sbiw	r26, 0x0a	; 10
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	be bf       	out	0x3e, r27	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	ad bf       	out	0x3d, r26	; 61
    1228:	ed b7       	in	r30, 0x3d	; 61
    122a:	fe b7       	in	r31, 0x3e	; 62
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	9c 93       	st	X, r25
    1232:	8e 93       	st	-X, r24
    1234:	11 97       	sbiw	r26, 0x01	; 1
    1236:	88 eb       	ldi	r24, 0xB8	; 184
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2a c0       	rjmp	.+84     	; 0x1290 <displayLocalTimeAtColRow+0xdc>
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	61 e2       	ldi	r22, 0x21	; 33
    1242:	73 e0       	ldi	r23, 0x03	; 3
		}else if(min<10){
    1244:	2a 30       	cpi	r18, 0x0A	; 10
    1246:	31 05       	cpc	r19, r1
    1248:	94 f4       	brge	.+36     	; 0x126e <displayLocalTimeAtColRow+0xba>
			sprintf(buff,"%d:0%d%s",hour,min,time_of_day);
    124a:	ad b7       	in	r26, 0x3d	; 61
    124c:	be b7       	in	r27, 0x3e	; 62
    124e:	1a 97       	sbiw	r26, 0x0a	; 10
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	be bf       	out	0x3e, r27	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	ad bf       	out	0x3d, r26	; 61
    125a:	ed b7       	in	r30, 0x3d	; 61
    125c:	fe b7       	in	r31, 0x3e	; 62
    125e:	31 96       	adiw	r30, 0x01	; 1
    1260:	12 96       	adiw	r26, 0x02	; 2
    1262:	9c 93       	st	X, r25
    1264:	8e 93       	st	-X, r24
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	81 ec       	ldi	r24, 0xC1	; 193
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	11 c0       	rjmp	.+34     	; 0x1290 <displayLocalTimeAtColRow+0xdc>
		}else{
			sprintf(buff,"%d:%d%s",hour,min,time_of_day);
    126e:	ad b7       	in	r26, 0x3d	; 61
    1270:	be b7       	in	r27, 0x3e	; 62
    1272:	1a 97       	sbiw	r26, 0x0a	; 10
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	be bf       	out	0x3e, r27	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	ad bf       	out	0x3d, r26	; 61
    127e:	ed b7       	in	r30, 0x3d	; 61
    1280:	fe b7       	in	r31, 0x3e	; 62
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	12 96       	adiw	r26, 0x02	; 2
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
    128a:	11 97       	sbiw	r26, 0x01	; 1
    128c:	8a ec       	ldi	r24, 0xCA	; 202
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	82 83       	std	Z+2, r24	; 0x02
    1294:	55 83       	std	Z+5, r21	; 0x05
    1296:	44 83       	std	Z+4, r20	; 0x04
    1298:	37 83       	std	Z+7, r19	; 0x07
    129a:	26 83       	std	Z+6, r18	; 0x06
    129c:	71 87       	std	Z+9, r23	; 0x09
    129e:	60 87       	std	Z+8, r22	; 0x08
    12a0:	0e 94 cf 10 	call	0x219e	; 0x219e <sprintf>
    12a4:	ed b7       	in	r30, 0x3d	; 61
    12a6:	fe b7       	in	r31, 0x3e	; 62
    12a8:	3a 96       	adiw	r30, 0x0a	; 10
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	fe bf       	out	0x3e, r31	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	ed bf       	out	0x3d, r30	; 61
		}							
		write_HD44780_DataAtRowCol(row,col,buff);		
    12b4:	81 2f       	mov	r24, r17
    12b6:	60 2f       	mov	r22, r16
    12b8:	ae 01       	movw	r20, r28
    12ba:	4f 5f       	subi	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
}
    12c2:	26 96       	adiw	r28, 0x06	; 6
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <lcdUI1>:
char c=(char)223;
char strCourse[] ="Hed:";
char strAltitude[] ="A:";

void lcdUI1(){// Degree Minutes Seconds view
	write_HD44780_Command(CLEAR_DISPLAY);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 92 01 	call	0x324	; 0x324 <write_HD44780_Command>
	write_HD44780_DataAtRowCol(1,1,strLat);//start printing value at 5th column
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	42 ed       	ldi	r20, 0xD2	; 210
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
	write_HD44780_DataAtRowCol(2,1,strLon);//value should be at 5th column
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	47 ed       	ldi	r20, 0xD7	; 215
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
	write_HD44780_DataAtRowCol(3,1,strSpeed);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	42 ee       	ldi	r20, 0xE2	; 226
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
	write_HD44780_DataAtRowCol(3,12,strFix);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	6c e0       	ldi	r22, 0x0C	; 12
    1306:	47 ee       	ldi	r20, 0xE7	; 231
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_HD44780_DataAtRowCol>
	//write_HD44780_DataAtRowCol(4,1,strCourse);
}
    130e:	08 95       	ret

00001310 <init_USART>:

#define F_CPU 7372800UL
#define USART_BAUDRATE 4800
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
void init_USART(){
	UBRRH = (BAUD_PRESCALE >> 8);
    1310:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; 
    1312:	8f e5       	ldi	r24, 0x5F	; 95
    1314:	89 b9       	out	0x09, r24	; 9

	
	UCSRB |= (1 << RXEN) | (1<<RXCIE);   // Turn on the reception
    1316:	8a b1       	in	r24, 0x0a	; 10
    1318:	80 69       	ori	r24, 0x90	; 144
    131a:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes 
    131c:	80 b5       	in	r24, 0x20	; 32
    131e:	86 68       	ori	r24, 0x86	; 134
    1320:	80 bd       	out	0x20, r24	; 32
}
    1322:	08 95       	ret

00001324 <__vector_13>:

ISR(USART_RXC_vect){
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
//copy data into buffer
writeToBuffer(UDR);
    1346:	8c b1       	in	r24, 0x0c	; 12
    1348:	0e 94 07 01 	call	0x20e	; 0x20e <writeToBuffer>
}
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <vfprintf>:
    136e:	a1 e1       	ldi	r26, 0x11	; 17
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ed eb       	ldi	r30, 0xBD	; 189
    1374:	f9 e0       	ldi	r31, 0x09	; 9
    1376:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__prologue_saves__>
    137a:	3c 01       	movw	r6, r24
    137c:	7f 87       	std	Y+15, r23	; 0x0f
    137e:	6e 87       	std	Y+14, r22	; 0x0e
    1380:	6a 01       	movw	r12, r20
    1382:	fc 01       	movw	r30, r24
    1384:	17 82       	std	Z+7, r1	; 0x07
    1386:	16 82       	std	Z+6, r1	; 0x06
    1388:	83 81       	ldd	r24, Z+3	; 0x03
    138a:	81 fd       	sbrc	r24, 1
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <vfprintf+0x26>
    138e:	6f ef       	ldi	r22, 0xFF	; 255
    1390:	7f ef       	ldi	r23, 0xFF	; 255
    1392:	6f c3       	rjmp	.+1758   	; 0x1a72 <vfprintf+0x704>
    1394:	9e 01       	movw	r18, r28
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	39 8b       	std	Y+17, r19	; 0x11
    139c:	28 8b       	std	Y+16, r18	; 0x10
    139e:	f3 01       	movw	r30, r6
    13a0:	23 81       	ldd	r18, Z+3	; 0x03
    13a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    13a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    13a6:	23 fd       	sbrc	r18, 3
    13a8:	85 91       	lpm	r24, Z+
    13aa:	23 ff       	sbrs	r18, 3
    13ac:	81 91       	ld	r24, Z+
    13ae:	ff 87       	std	Y+15, r31	; 0x0f
    13b0:	ee 87       	std	Y+14, r30	; 0x0e
    13b2:	88 23       	and	r24, r24
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <vfprintf+0x4a>
    13b6:	5a c3       	rjmp	.+1716   	; 0x1a6c <vfprintf+0x6fe>
    13b8:	85 32       	cpi	r24, 0x25	; 37
    13ba:	51 f4       	brne	.+20     	; 0x13d0 <vfprintf+0x62>
    13bc:	ee 85       	ldd	r30, Y+14	; 0x0e
    13be:	ff 85       	ldd	r31, Y+15	; 0x0f
    13c0:	23 fd       	sbrc	r18, 3
    13c2:	85 91       	lpm	r24, Z+
    13c4:	23 ff       	sbrs	r18, 3
    13c6:	81 91       	ld	r24, Z+
    13c8:	ff 87       	std	Y+15, r31	; 0x0f
    13ca:	ee 87       	std	Y+14, r30	; 0x0e
    13cc:	85 32       	cpi	r24, 0x25	; 37
    13ce:	29 f4       	brne	.+10     	; 0x13da <vfprintf+0x6c>
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	b3 01       	movw	r22, r6
    13d4:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    13d8:	e2 cf       	rjmp	.-60     	; 0x139e <vfprintf+0x30>
    13da:	98 2f       	mov	r25, r24
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	88 24       	eor	r8, r8
    13e0:	99 24       	eor	r9, r9
    13e2:	10 32       	cpi	r17, 0x20	; 32
    13e4:	b0 f4       	brcc	.+44     	; 0x1412 <vfprintf+0xa4>
    13e6:	9b 32       	cpi	r25, 0x2B	; 43
    13e8:	69 f0       	breq	.+26     	; 0x1404 <vfprintf+0x96>
    13ea:	9c 32       	cpi	r25, 0x2C	; 44
    13ec:	28 f4       	brcc	.+10     	; 0x13f8 <vfprintf+0x8a>
    13ee:	90 32       	cpi	r25, 0x20	; 32
    13f0:	51 f0       	breq	.+20     	; 0x1406 <vfprintf+0x98>
    13f2:	93 32       	cpi	r25, 0x23	; 35
    13f4:	71 f4       	brne	.+28     	; 0x1412 <vfprintf+0xa4>
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <vfprintf+0xa0>
    13f8:	9d 32       	cpi	r25, 0x2D	; 45
    13fa:	39 f0       	breq	.+14     	; 0x140a <vfprintf+0x9c>
    13fc:	90 33       	cpi	r25, 0x30	; 48
    13fe:	49 f4       	brne	.+18     	; 0x1412 <vfprintf+0xa4>
    1400:	11 60       	ori	r17, 0x01	; 1
    1402:	28 c0       	rjmp	.+80     	; 0x1454 <vfprintf+0xe6>
    1404:	12 60       	ori	r17, 0x02	; 2
    1406:	14 60       	ori	r17, 0x04	; 4
    1408:	25 c0       	rjmp	.+74     	; 0x1454 <vfprintf+0xe6>
    140a:	18 60       	ori	r17, 0x08	; 8
    140c:	23 c0       	rjmp	.+70     	; 0x1454 <vfprintf+0xe6>
    140e:	10 61       	ori	r17, 0x10	; 16
    1410:	21 c0       	rjmp	.+66     	; 0x1454 <vfprintf+0xe6>
    1412:	17 fd       	sbrc	r17, 7
    1414:	2a c0       	rjmp	.+84     	; 0x146a <vfprintf+0xfc>
    1416:	89 2f       	mov	r24, r25
    1418:	80 53       	subi	r24, 0x30	; 48
    141a:	8a 30       	cpi	r24, 0x0A	; 10
    141c:	78 f4       	brcc	.+30     	; 0x143c <vfprintf+0xce>
    141e:	16 ff       	sbrs	r17, 6
    1420:	06 c0       	rjmp	.+12     	; 0x142e <vfprintf+0xc0>
    1422:	fa e0       	ldi	r31, 0x0A	; 10
    1424:	9f 9e       	mul	r9, r31
    1426:	90 2c       	mov	r9, r0
    1428:	11 24       	eor	r1, r1
    142a:	98 0e       	add	r9, r24
    142c:	13 c0       	rjmp	.+38     	; 0x1454 <vfprintf+0xe6>
    142e:	3a e0       	ldi	r19, 0x0A	; 10
    1430:	83 9e       	mul	r8, r19
    1432:	80 2c       	mov	r8, r0
    1434:	11 24       	eor	r1, r1
    1436:	88 0e       	add	r8, r24
    1438:	10 62       	ori	r17, 0x20	; 32
    143a:	0c c0       	rjmp	.+24     	; 0x1454 <vfprintf+0xe6>
    143c:	9e 32       	cpi	r25, 0x2E	; 46
    143e:	21 f4       	brne	.+8      	; 0x1448 <vfprintf+0xda>
    1440:	16 fd       	sbrc	r17, 6
    1442:	14 c3       	rjmp	.+1576   	; 0x1a6c <vfprintf+0x6fe>
    1444:	10 64       	ori	r17, 0x40	; 64
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <vfprintf+0xe6>
    1448:	9c 36       	cpi	r25, 0x6C	; 108
    144a:	11 f4       	brne	.+4      	; 0x1450 <vfprintf+0xe2>
    144c:	10 68       	ori	r17, 0x80	; 128
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0xe6>
    1450:	98 36       	cpi	r25, 0x68	; 104
    1452:	59 f4       	brne	.+22     	; 0x146a <vfprintf+0xfc>
    1454:	ee 85       	ldd	r30, Y+14	; 0x0e
    1456:	ff 85       	ldd	r31, Y+15	; 0x0f
    1458:	23 fd       	sbrc	r18, 3
    145a:	95 91       	lpm	r25, Z+
    145c:	23 ff       	sbrs	r18, 3
    145e:	91 91       	ld	r25, Z+
    1460:	ff 87       	std	Y+15, r31	; 0x0f
    1462:	ee 87       	std	Y+14, r30	; 0x0e
    1464:	99 23       	and	r25, r25
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0xfc>
    1468:	bc cf       	rjmp	.-136    	; 0x13e2 <vfprintf+0x74>
    146a:	89 2f       	mov	r24, r25
    146c:	85 54       	subi	r24, 0x45	; 69
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	20 f4       	brcc	.+8      	; 0x147a <vfprintf+0x10c>
    1472:	81 2f       	mov	r24, r17
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	90 5e       	subi	r25, 0xE0	; 224
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <vfprintf+0x11a>
    147a:	89 2f       	mov	r24, r25
    147c:	85 56       	subi	r24, 0x65	; 101
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	08 f0       	brcs	.+2      	; 0x1484 <vfprintf+0x116>
    1482:	9f c1       	rjmp	.+830    	; 0x17c2 <vfprintf+0x454>
    1484:	81 2f       	mov	r24, r17
    1486:	8f 7e       	andi	r24, 0xEF	; 239
    1488:	86 fd       	sbrc	r24, 6
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x122>
    148c:	76 e0       	ldi	r23, 0x06	; 6
    148e:	97 2e       	mov	r9, r23
    1490:	6f e3       	ldi	r22, 0x3F	; 63
    1492:	f6 2e       	mov	r15, r22
    1494:	f8 22       	and	r15, r24
    1496:	95 36       	cpi	r25, 0x65	; 101
    1498:	19 f4       	brne	.+6      	; 0x14a0 <vfprintf+0x132>
    149a:	f0 e4       	ldi	r31, 0x40	; 64
    149c:	ff 2a       	or	r15, r31
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <vfprintf+0x140>
    14a0:	96 36       	cpi	r25, 0x66	; 102
    14a2:	19 f4       	brne	.+6      	; 0x14aa <vfprintf+0x13c>
    14a4:	20 e8       	ldi	r18, 0x80	; 128
    14a6:	f2 2a       	or	r15, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x140>
    14aa:	91 10       	cpse	r9, r1
    14ac:	9a 94       	dec	r9
    14ae:	f7 fe       	sbrs	r15, 7
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <vfprintf+0x158>
    14b2:	3b e3       	ldi	r19, 0x3B	; 59
    14b4:	39 15       	cp	r19, r9
    14b6:	18 f4       	brcc	.+6      	; 0x14be <vfprintf+0x150>
    14b8:	5c e3       	ldi	r21, 0x3C	; 60
    14ba:	b5 2e       	mov	r11, r21
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x154>
    14be:	b9 2c       	mov	r11, r9
    14c0:	b3 94       	inc	r11
    14c2:	27 e0       	ldi	r18, 0x07	; 7
    14c4:	09 c0       	rjmp	.+18     	; 0x14d8 <vfprintf+0x16a>
    14c6:	47 e0       	ldi	r20, 0x07	; 7
    14c8:	49 15       	cp	r20, r9
    14ca:	20 f4       	brcc	.+8      	; 0x14d4 <vfprintf+0x166>
    14cc:	bb 24       	eor	r11, r11
    14ce:	47 e0       	ldi	r20, 0x07	; 7
    14d0:	94 2e       	mov	r9, r20
    14d2:	f7 cf       	rjmp	.-18     	; 0x14c2 <vfprintf+0x154>
    14d4:	29 2d       	mov	r18, r9
    14d6:	bb 24       	eor	r11, r11
    14d8:	c6 01       	movw	r24, r12
    14da:	04 96       	adiw	r24, 0x04	; 4
    14dc:	9d 87       	std	Y+13, r25	; 0x0d
    14de:	8c 87       	std	Y+12, r24	; 0x0c
    14e0:	f6 01       	movw	r30, r12
    14e2:	60 81       	ld	r22, Z
    14e4:	71 81       	ldd	r23, Z+1	; 0x01
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	ae 01       	movw	r20, r28
    14ec:	4f 5f       	subi	r20, 0xFF	; 255
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	0b 2d       	mov	r16, r11
    14f2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__ftoa_engine>
    14f6:	6c 01       	movw	r12, r24
    14f8:	09 81       	ldd	r16, Y+1	; 0x01
    14fa:	20 2e       	mov	r2, r16
    14fc:	33 24       	eor	r3, r3
    14fe:	00 ff       	sbrs	r16, 0
    1500:	04 c0       	rjmp	.+8      	; 0x150a <vfprintf+0x19c>
    1502:	03 fd       	sbrc	r16, 3
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0x19c>
    1506:	1d e2       	ldi	r17, 0x2D	; 45
    1508:	09 c0       	rjmp	.+18     	; 0x151c <vfprintf+0x1ae>
    150a:	f1 fe       	sbrs	r15, 1
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <vfprintf+0x1a4>
    150e:	1b e2       	ldi	r17, 0x2B	; 43
    1510:	05 c0       	rjmp	.+10     	; 0x151c <vfprintf+0x1ae>
    1512:	f2 fc       	sbrc	r15, 2
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x1ac>
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	01 c0       	rjmp	.+2      	; 0x151c <vfprintf+0x1ae>
    151a:	10 e2       	ldi	r17, 0x20	; 32
    151c:	c1 01       	movw	r24, r2
    151e:	8c 70       	andi	r24, 0x0C	; 12
    1520:	90 70       	andi	r25, 0x00	; 0
    1522:	89 2b       	or	r24, r25
    1524:	b9 f1       	breq	.+110    	; 0x1594 <vfprintf+0x226>
    1526:	11 23       	and	r17, r17
    1528:	11 f4       	brne	.+4      	; 0x152e <vfprintf+0x1c0>
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <vfprintf+0x1c2>
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	88 15       	cp	r24, r8
    1532:	10 f0       	brcs	.+4      	; 0x1538 <vfprintf+0x1ca>
    1534:	88 24       	eor	r8, r8
    1536:	0a c0       	rjmp	.+20     	; 0x154c <vfprintf+0x1de>
    1538:	88 1a       	sub	r8, r24
    153a:	f3 fc       	sbrc	r15, 3
    153c:	07 c0       	rjmp	.+14     	; 0x154c <vfprintf+0x1de>
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	b3 01       	movw	r22, r6
    1544:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1548:	8a 94       	dec	r8
    154a:	c9 f7       	brne	.-14     	; 0x153e <vfprintf+0x1d0>
    154c:	11 23       	and	r17, r17
    154e:	29 f0       	breq	.+10     	; 0x155a <vfprintf+0x1ec>
    1550:	81 2f       	mov	r24, r17
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    155a:	23 fe       	sbrs	r2, 3
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <vfprintf+0x1f6>
    155e:	04 e5       	ldi	r16, 0x54	; 84
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	0e c0       	rjmp	.+28     	; 0x1580 <vfprintf+0x212>
    1564:	08 e5       	ldi	r16, 0x58	; 88
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <vfprintf+0x212>
    156a:	e1 14       	cp	r14, r1
    156c:	f1 04       	cpc	r15, r1
    156e:	09 f0       	breq	.+2      	; 0x1572 <vfprintf+0x204>
    1570:	80 52       	subi	r24, 0x20	; 32
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b3 01       	movw	r22, r6
    1576:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	05 c0       	rjmp	.+10     	; 0x158a <vfprintf+0x21c>
    1580:	ef 2c       	mov	r14, r15
    1582:	ff 24       	eor	r15, r15
    1584:	f0 e1       	ldi	r31, 0x10	; 16
    1586:	ef 22       	and	r14, r31
    1588:	ff 24       	eor	r15, r15
    158a:	f8 01       	movw	r30, r16
    158c:	84 91       	lpm	r24, Z+
    158e:	88 23       	and	r24, r24
    1590:	61 f7       	brne	.-40     	; 0x156a <vfprintf+0x1fc>
    1592:	14 c1       	rjmp	.+552    	; 0x17bc <vfprintf+0x44e>
    1594:	f7 fe       	sbrs	r15, 7
    1596:	12 c0       	rjmp	.+36     	; 0x15bc <vfprintf+0x24e>
    1598:	bc 0c       	add	r11, r12
    159a:	24 fe       	sbrs	r2, 4
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <vfprintf+0x238>
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	81 33       	cpi	r24, 0x31	; 49
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <vfprintf+0x238>
    15a4:	ba 94       	dec	r11
    15a6:	1b 14       	cp	r1, r11
    15a8:	1c f0       	brlt	.+6      	; 0x15b0 <vfprintf+0x242>
    15aa:	bb 24       	eor	r11, r11
    15ac:	b3 94       	inc	r11
    15ae:	2d c0       	rjmp	.+90     	; 0x160a <vfprintf+0x29c>
    15b0:	f8 e0       	ldi	r31, 0x08	; 8
    15b2:	fb 15       	cp	r31, r11
    15b4:	50 f5       	brcc	.+84     	; 0x160a <vfprintf+0x29c>
    15b6:	38 e0       	ldi	r19, 0x08	; 8
    15b8:	b3 2e       	mov	r11, r19
    15ba:	27 c0       	rjmp	.+78     	; 0x160a <vfprintf+0x29c>
    15bc:	f6 fc       	sbrc	r15, 6
    15be:	25 c0       	rjmp	.+74     	; 0x160a <vfprintf+0x29c>
    15c0:	89 2d       	mov	r24, r9
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	8c 15       	cp	r24, r12
    15c6:	9d 05       	cpc	r25, r13
    15c8:	4c f0       	brlt	.+18     	; 0x15dc <vfprintf+0x26e>
    15ca:	2c ef       	ldi	r18, 0xFC	; 252
    15cc:	c2 16       	cp	r12, r18
    15ce:	2f ef       	ldi	r18, 0xFF	; 255
    15d0:	d2 06       	cpc	r13, r18
    15d2:	24 f0       	brlt	.+8      	; 0x15dc <vfprintf+0x26e>
    15d4:	30 e8       	ldi	r19, 0x80	; 128
    15d6:	f3 2a       	or	r15, r19
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <vfprintf+0x26e>
    15da:	9a 94       	dec	r9
    15dc:	99 20       	and	r9, r9
    15de:	49 f0       	breq	.+18     	; 0x15f2 <vfprintf+0x284>
    15e0:	e2 e0       	ldi	r30, 0x02	; 2
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ec 0f       	add	r30, r28
    15e6:	fd 1f       	adc	r31, r29
    15e8:	e9 0d       	add	r30, r9
    15ea:	f1 1d       	adc	r31, r1
    15ec:	80 81       	ld	r24, Z
    15ee:	80 33       	cpi	r24, 0x30	; 48
    15f0:	a1 f3       	breq	.-24     	; 0x15da <vfprintf+0x26c>
    15f2:	f7 fe       	sbrs	r15, 7
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <vfprintf+0x29c>
    15f6:	b9 2c       	mov	r11, r9
    15f8:	b3 94       	inc	r11
    15fa:	89 2d       	mov	r24, r9
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	c8 16       	cp	r12, r24
    1600:	d9 06       	cpc	r13, r25
    1602:	14 f0       	brlt	.+4      	; 0x1608 <vfprintf+0x29a>
    1604:	99 24       	eor	r9, r9
    1606:	01 c0       	rjmp	.+2      	; 0x160a <vfprintf+0x29c>
    1608:	9c 18       	sub	r9, r12
    160a:	f7 fc       	sbrc	r15, 7
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <vfprintf+0x2a6>
    160e:	25 e0       	ldi	r18, 0x05	; 5
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <vfprintf+0x2b8>
    1614:	1c 14       	cp	r1, r12
    1616:	1d 04       	cpc	r1, r13
    1618:	1c f0       	brlt	.+6      	; 0x1620 <vfprintf+0x2b2>
    161a:	21 e0       	ldi	r18, 0x01	; 1
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <vfprintf+0x2b8>
    1620:	96 01       	movw	r18, r12
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	11 23       	and	r17, r17
    1628:	11 f0       	breq	.+4      	; 0x162e <vfprintf+0x2c0>
    162a:	2f 5f       	subi	r18, 0xFF	; 255
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	99 20       	and	r9, r9
    1630:	29 f0       	breq	.+10     	; 0x163c <vfprintf+0x2ce>
    1632:	89 2d       	mov	r24, r9
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	28 0f       	add	r18, r24
    163a:	39 1f       	adc	r19, r25
    163c:	88 2d       	mov	r24, r8
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	14 f0       	brlt	.+4      	; 0x164a <vfprintf+0x2dc>
    1646:	88 24       	eor	r8, r8
    1648:	01 c0       	rjmp	.+2      	; 0x164c <vfprintf+0x2de>
    164a:	82 1a       	sub	r8, r18
    164c:	4f 2c       	mov	r4, r15
    164e:	55 24       	eor	r5, r5
    1650:	c2 01       	movw	r24, r4
    1652:	89 70       	andi	r24, 0x09	; 9
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	89 2b       	or	r24, r25
    1658:	39 f0       	breq	.+14     	; 0x1668 <vfprintf+0x2fa>
    165a:	08 c0       	rjmp	.+16     	; 0x166c <vfprintf+0x2fe>
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	b3 01       	movw	r22, r6
    1662:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1666:	8a 94       	dec	r8
    1668:	88 20       	and	r8, r8
    166a:	c1 f7       	brne	.-16     	; 0x165c <vfprintf+0x2ee>
    166c:	11 23       	and	r17, r17
    166e:	29 f0       	breq	.+10     	; 0x167a <vfprintf+0x30c>
    1670:	81 2f       	mov	r24, r17
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	b3 01       	movw	r22, r6
    1676:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    167a:	43 fe       	sbrs	r4, 3
    167c:	07 c0       	rjmp	.+14     	; 0x168c <vfprintf+0x31e>
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0x322>
    1680:	80 e3       	ldi	r24, 0x30	; 48
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b3 01       	movw	r22, r6
    1686:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    168a:	8a 94       	dec	r8
    168c:	88 20       	and	r8, r8
    168e:	c1 f7       	brne	.-16     	; 0x1680 <vfprintf+0x312>
    1690:	f7 fe       	sbrs	r15, 7
    1692:	46 c0       	rjmp	.+140    	; 0x1720 <vfprintf+0x3b2>
    1694:	86 01       	movw	r16, r12
    1696:	d7 fe       	sbrs	r13, 7
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x330>
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	76 01       	movw	r14, r12
    16a0:	08 94       	sec
    16a2:	e1 1c       	adc	r14, r1
    16a4:	f1 1c       	adc	r15, r1
    16a6:	e0 1a       	sub	r14, r16
    16a8:	f1 0a       	sbc	r15, r17
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	4c 0f       	add	r20, r28
    16b0:	5d 1f       	adc	r21, r29
    16b2:	e4 0e       	add	r14, r20
    16b4:	f5 1e       	adc	r15, r21
    16b6:	26 01       	movw	r4, r12
    16b8:	4b 18       	sub	r4, r11
    16ba:	51 08       	sbc	r5, r1
    16bc:	89 2d       	mov	r24, r9
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	aa 24       	eor	r10, r10
    16c2:	bb 24       	eor	r11, r11
    16c4:	a8 1a       	sub	r10, r24
    16c6:	b9 0a       	sbc	r11, r25
    16c8:	5f ef       	ldi	r21, 0xFF	; 255
    16ca:	0f 3f       	cpi	r16, 0xFF	; 255
    16cc:	15 07       	cpc	r17, r21
    16ce:	29 f4       	brne	.+10     	; 0x16da <vfprintf+0x36c>
    16d0:	8e e2       	ldi	r24, 0x2E	; 46
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	b3 01       	movw	r22, r6
    16d6:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    16da:	c0 16       	cp	r12, r16
    16dc:	d1 06       	cpc	r13, r17
    16de:	34 f0       	brlt	.+12     	; 0x16ec <vfprintf+0x37e>
    16e0:	40 16       	cp	r4, r16
    16e2:	51 06       	cpc	r5, r17
    16e4:	1c f4       	brge	.+6      	; 0x16ec <vfprintf+0x37e>
    16e6:	f7 01       	movw	r30, r14
    16e8:	80 81       	ld	r24, Z
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x380>
    16ec:	80 e3       	ldi	r24, 0x30	; 48
    16ee:	01 50       	subi	r16, 0x01	; 1
    16f0:	10 40       	sbci	r17, 0x00	; 0
    16f2:	08 94       	sec
    16f4:	e1 1c       	adc	r14, r1
    16f6:	f1 1c       	adc	r15, r1
    16f8:	0a 15       	cp	r16, r10
    16fa:	1b 05       	cpc	r17, r11
    16fc:	2c f0       	brlt	.+10     	; 0x1708 <vfprintf+0x39a>
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b3 01       	movw	r22, r6
    1702:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1706:	e0 cf       	rjmp	.-64     	; 0x16c8 <vfprintf+0x35a>
    1708:	0c 15       	cp	r16, r12
    170a:	1d 05       	cpc	r17, r13
    170c:	39 f4       	brne	.+14     	; 0x171c <vfprintf+0x3ae>
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	96 33       	cpi	r25, 0x36	; 54
    1712:	18 f4       	brcc	.+6      	; 0x171a <vfprintf+0x3ac>
    1714:	95 33       	cpi	r25, 0x35	; 53
    1716:	11 f4       	brne	.+4      	; 0x171c <vfprintf+0x3ae>
    1718:	24 fe       	sbrs	r2, 4
    171a:	81 e3       	ldi	r24, 0x31	; 49
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	4b c0       	rjmp	.+150    	; 0x17b6 <vfprintf+0x448>
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	81 33       	cpi	r24, 0x31	; 49
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x3ba>
    1726:	0f 7e       	andi	r16, 0xEF	; 239
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b3 01       	movw	r22, r6
    172c:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1730:	99 20       	and	r9, r9
    1732:	a1 f0       	breq	.+40     	; 0x175c <vfprintf+0x3ee>
    1734:	8e e2       	ldi	r24, 0x2E	; 46
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	b3 01       	movw	r22, r6
    173a:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    173e:	12 e0       	ldi	r17, 0x02	; 2
    1740:	e1 e0       	ldi	r30, 0x01	; 1
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	ec 0f       	add	r30, r28
    1746:	fd 1f       	adc	r31, r29
    1748:	e1 0f       	add	r30, r17
    174a:	f1 1d       	adc	r31, r1
    174c:	1f 5f       	subi	r17, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	b3 01       	movw	r22, r6
    1754:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1758:	9a 94       	dec	r9
    175a:	91 f7       	brne	.-28     	; 0x1740 <vfprintf+0x3d2>
    175c:	44 fc       	sbrc	r4, 4
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <vfprintf+0x3f8>
    1760:	85 e6       	ldi	r24, 0x65	; 101
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x3fc>
    1766:	85 e4       	ldi	r24, 0x45	; 69
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	b3 01       	movw	r22, r6
    176c:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1770:	d7 fc       	sbrc	r13, 7
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x410>
    1774:	c1 14       	cp	r12, r1
    1776:	d1 04       	cpc	r13, r1
    1778:	41 f4       	brne	.+16     	; 0x178a <vfprintf+0x41c>
    177a:	04 ff       	sbrs	r16, 4
    177c:	06 c0       	rjmp	.+12     	; 0x178a <vfprintf+0x41c>
    177e:	d0 94       	com	r13
    1780:	c1 94       	neg	r12
    1782:	d1 08       	sbc	r13, r1
    1784:	d3 94       	inc	r13
    1786:	8d e2       	ldi	r24, 0x2D	; 45
    1788:	01 c0       	rjmp	.+2      	; 0x178c <vfprintf+0x41e>
    178a:	8b e2       	ldi	r24, 0x2B	; 43
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b3 01       	movw	r22, r6
    1790:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1794:	80 e3       	ldi	r24, 0x30	; 48
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <vfprintf+0x434>
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	26 ef       	ldi	r18, 0xF6	; 246
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	c2 0e       	add	r12, r18
    17a0:	d3 1e       	adc	r13, r19
    17a2:	3a e0       	ldi	r19, 0x0A	; 10
    17a4:	c3 16       	cp	r12, r19
    17a6:	d1 04       	cpc	r13, r1
    17a8:	bc f7       	brge	.-18     	; 0x1798 <vfprintf+0x42a>
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	b3 01       	movw	r22, r6
    17ae:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    17b2:	c6 01       	movw	r24, r12
    17b4:	c0 96       	adiw	r24, 0x30	; 48
    17b6:	b3 01       	movw	r22, r6
    17b8:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    17bc:	cc 84       	ldd	r12, Y+12	; 0x0c
    17be:	dd 84       	ldd	r13, Y+13	; 0x0d
    17c0:	52 c1       	rjmp	.+676    	; 0x1a66 <vfprintf+0x6f8>
    17c2:	93 36       	cpi	r25, 0x63	; 99
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <vfprintf+0x464>
    17c6:	93 37       	cpi	r25, 0x73	; 115
    17c8:	99 f0       	breq	.+38     	; 0x17f0 <vfprintf+0x482>
    17ca:	93 35       	cpi	r25, 0x53	; 83
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <vfprintf+0x462>
    17ce:	59 c0       	rjmp	.+178    	; 0x1882 <vfprintf+0x514>
    17d0:	23 c0       	rjmp	.+70     	; 0x1818 <vfprintf+0x4aa>
    17d2:	f6 01       	movw	r30, r12
    17d4:	80 81       	ld	r24, Z
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	5e 01       	movw	r10, r28
    17da:	08 94       	sec
    17dc:	a1 1c       	adc	r10, r1
    17de:	b1 1c       	adc	r11, r1
    17e0:	22 e0       	ldi	r18, 0x02	; 2
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	c2 0e       	add	r12, r18
    17e6:	d3 1e       	adc	r13, r19
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	e2 2e       	mov	r14, r18
    17ec:	f1 2c       	mov	r15, r1
    17ee:	12 c0       	rjmp	.+36     	; 0x1814 <vfprintf+0x4a6>
    17f0:	f6 01       	movw	r30, r12
    17f2:	a0 80       	ld	r10, Z
    17f4:	b1 80       	ldd	r11, Z+1	; 0x01
    17f6:	16 fd       	sbrc	r17, 6
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <vfprintf+0x492>
    17fa:	6f ef       	ldi	r22, 0xFF	; 255
    17fc:	7f ef       	ldi	r23, 0xFF	; 255
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <vfprintf+0x496>
    1800:	69 2d       	mov	r22, r9
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	22 e0       	ldi	r18, 0x02	; 2
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	c2 0e       	add	r12, r18
    180a:	d3 1e       	adc	r13, r19
    180c:	c5 01       	movw	r24, r10
    180e:	0e 94 90 10 	call	0x2120	; 0x2120 <strnlen>
    1812:	7c 01       	movw	r14, r24
    1814:	1f 77       	andi	r17, 0x7F	; 127
    1816:	13 c0       	rjmp	.+38     	; 0x183e <vfprintf+0x4d0>
    1818:	f6 01       	movw	r30, r12
    181a:	a0 80       	ld	r10, Z
    181c:	b1 80       	ldd	r11, Z+1	; 0x01
    181e:	16 fd       	sbrc	r17, 6
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <vfprintf+0x4ba>
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	7f ef       	ldi	r23, 0xFF	; 255
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x4be>
    1828:	69 2d       	mov	r22, r9
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	22 e0       	ldi	r18, 0x02	; 2
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	c2 0e       	add	r12, r18
    1832:	d3 1e       	adc	r13, r19
    1834:	c5 01       	movw	r24, r10
    1836:	0e 94 75 10 	call	0x20ea	; 0x20ea <strnlen_P>
    183a:	7c 01       	movw	r14, r24
    183c:	10 68       	ori	r17, 0x80	; 128
    183e:	13 ff       	sbrs	r17, 3
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vfprintf+0x4e2>
    1842:	1b c0       	rjmp	.+54     	; 0x187a <vfprintf+0x50c>
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b3 01       	movw	r22, r6
    184a:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    184e:	8a 94       	dec	r8
    1850:	88 2d       	mov	r24, r8
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	e8 16       	cp	r14, r24
    1856:	f9 06       	cpc	r15, r25
    1858:	a8 f3       	brcs	.-22     	; 0x1844 <vfprintf+0x4d6>
    185a:	0f c0       	rjmp	.+30     	; 0x187a <vfprintf+0x50c>
    185c:	f5 01       	movw	r30, r10
    185e:	17 fd       	sbrc	r17, 7
    1860:	85 91       	lpm	r24, Z+
    1862:	17 ff       	sbrs	r17, 7
    1864:	81 91       	ld	r24, Z+
    1866:	5f 01       	movw	r10, r30
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	b3 01       	movw	r22, r6
    186c:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1870:	81 10       	cpse	r8, r1
    1872:	8a 94       	dec	r8
    1874:	08 94       	sec
    1876:	e1 08       	sbc	r14, r1
    1878:	f1 08       	sbc	r15, r1
    187a:	e1 14       	cp	r14, r1
    187c:	f1 04       	cpc	r15, r1
    187e:	71 f7       	brne	.-36     	; 0x185c <vfprintf+0x4ee>
    1880:	f2 c0       	rjmp	.+484    	; 0x1a66 <vfprintf+0x6f8>
    1882:	94 36       	cpi	r25, 0x64	; 100
    1884:	11 f0       	breq	.+4      	; 0x188a <vfprintf+0x51c>
    1886:	99 36       	cpi	r25, 0x69	; 105
    1888:	89 f5       	brne	.+98     	; 0x18ec <vfprintf+0x57e>
    188a:	17 ff       	sbrs	r17, 7
    188c:	08 c0       	rjmp	.+16     	; 0x189e <vfprintf+0x530>
    188e:	f6 01       	movw	r30, r12
    1890:	20 81       	ld	r18, Z
    1892:	31 81       	ldd	r19, Z+1	; 0x01
    1894:	42 81       	ldd	r20, Z+2	; 0x02
    1896:	53 81       	ldd	r21, Z+3	; 0x03
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0a c0       	rjmp	.+20     	; 0x18b2 <vfprintf+0x544>
    189e:	f6 01       	movw	r30, r12
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	9c 01       	movw	r18, r24
    18a6:	44 27       	eor	r20, r20
    18a8:	37 fd       	sbrc	r19, 7
    18aa:	40 95       	com	r20
    18ac:	54 2f       	mov	r21, r20
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	c8 0e       	add	r12, r24
    18b4:	d9 1e       	adc	r13, r25
    18b6:	9f e6       	ldi	r25, 0x6F	; 111
    18b8:	f9 2e       	mov	r15, r25
    18ba:	f1 22       	and	r15, r17
    18bc:	57 ff       	sbrs	r21, 7
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x564>
    18c0:	50 95       	com	r21
    18c2:	40 95       	com	r20
    18c4:	30 95       	com	r19
    18c6:	21 95       	neg	r18
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	4f 4f       	sbci	r20, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255
    18ce:	90 e8       	ldi	r25, 0x80	; 128
    18d0:	f9 2a       	or	r15, r25
    18d2:	ca 01       	movw	r24, r20
    18d4:	b9 01       	movw	r22, r18
    18d6:	ae 01       	movw	r20, r28
    18d8:	4f 5f       	subi	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	2a e0       	ldi	r18, 0x0A	; 10
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__ultoa_invert>
    18e4:	e8 2e       	mov	r14, r24
    18e6:	e8 89       	ldd	r30, Y+16	; 0x10
    18e8:	ee 1a       	sub	r14, r30
    18ea:	41 c0       	rjmp	.+130    	; 0x196e <vfprintf+0x600>
    18ec:	95 37       	cpi	r25, 0x75	; 117
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <vfprintf+0x58a>
    18f0:	1f 7e       	andi	r17, 0xEF	; 239
    18f2:	2a e0       	ldi	r18, 0x0A	; 10
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	1c c0       	rjmp	.+56     	; 0x1930 <vfprintf+0x5c2>
    18f8:	19 7f       	andi	r17, 0xF9	; 249
    18fa:	9f 36       	cpi	r25, 0x6F	; 111
    18fc:	61 f0       	breq	.+24     	; 0x1916 <vfprintf+0x5a8>
    18fe:	90 37       	cpi	r25, 0x70	; 112
    1900:	20 f4       	brcc	.+8      	; 0x190a <vfprintf+0x59c>
    1902:	98 35       	cpi	r25, 0x58	; 88
    1904:	09 f0       	breq	.+2      	; 0x1908 <vfprintf+0x59a>
    1906:	b2 c0       	rjmp	.+356    	; 0x1a6c <vfprintf+0x6fe>
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <vfprintf+0x5ba>
    190a:	90 37       	cpi	r25, 0x70	; 112
    190c:	39 f0       	breq	.+14     	; 0x191c <vfprintf+0x5ae>
    190e:	98 37       	cpi	r25, 0x78	; 120
    1910:	09 f0       	breq	.+2      	; 0x1914 <vfprintf+0x5a6>
    1912:	ac c0       	rjmp	.+344    	; 0x1a6c <vfprintf+0x6fe>
    1914:	04 c0       	rjmp	.+8      	; 0x191e <vfprintf+0x5b0>
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	0a c0       	rjmp	.+20     	; 0x1930 <vfprintf+0x5c2>
    191c:	10 61       	ori	r17, 0x10	; 16
    191e:	14 fd       	sbrc	r17, 4
    1920:	14 60       	ori	r17, 0x04	; 4
    1922:	20 e1       	ldi	r18, 0x10	; 16
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <vfprintf+0x5c2>
    1928:	14 fd       	sbrc	r17, 4
    192a:	16 60       	ori	r17, 0x06	; 6
    192c:	20 e1       	ldi	r18, 0x10	; 16
    192e:	32 e0       	ldi	r19, 0x02	; 2
    1930:	17 ff       	sbrs	r17, 7
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <vfprintf+0x5d6>
    1934:	f6 01       	movw	r30, r12
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	44 e0       	ldi	r20, 0x04	; 4
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	08 c0       	rjmp	.+16     	; 0x1954 <vfprintf+0x5e6>
    1944:	f6 01       	movw	r30, r12
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	bc 01       	movw	r22, r24
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	42 e0       	ldi	r20, 0x02	; 2
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	c4 0e       	add	r12, r20
    1956:	d5 1e       	adc	r13, r21
    1958:	ae 01       	movw	r20, r28
    195a:	4f 5f       	subi	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__ultoa_invert>
    1962:	e8 2e       	mov	r14, r24
    1964:	58 89       	ldd	r21, Y+16	; 0x10
    1966:	e5 1a       	sub	r14, r21
    1968:	8f e7       	ldi	r24, 0x7F	; 127
    196a:	f8 2e       	mov	r15, r24
    196c:	f1 22       	and	r15, r17
    196e:	f6 fe       	sbrs	r15, 6
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <vfprintf+0x61a>
    1972:	8e ef       	ldi	r24, 0xFE	; 254
    1974:	f8 22       	and	r15, r24
    1976:	e9 14       	cp	r14, r9
    1978:	38 f4       	brcc	.+14     	; 0x1988 <vfprintf+0x61a>
    197a:	f4 fe       	sbrs	r15, 4
    197c:	07 c0       	rjmp	.+14     	; 0x198c <vfprintf+0x61e>
    197e:	f2 fc       	sbrc	r15, 2
    1980:	05 c0       	rjmp	.+10     	; 0x198c <vfprintf+0x61e>
    1982:	9f ee       	ldi	r25, 0xEF	; 239
    1984:	f9 22       	and	r15, r25
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x61e>
    1988:	1e 2d       	mov	r17, r14
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vfprintf+0x620>
    198c:	19 2d       	mov	r17, r9
    198e:	f4 fe       	sbrs	r15, 4
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <vfprintf+0x63e>
    1992:	fe 01       	movw	r30, r28
    1994:	ee 0d       	add	r30, r14
    1996:	f1 1d       	adc	r31, r1
    1998:	80 81       	ld	r24, Z
    199a:	80 33       	cpi	r24, 0x30	; 48
    199c:	19 f4       	brne	.+6      	; 0x19a4 <vfprintf+0x636>
    199e:	e9 ee       	ldi	r30, 0xE9	; 233
    19a0:	fe 22       	and	r15, r30
    19a2:	08 c0       	rjmp	.+16     	; 0x19b4 <vfprintf+0x646>
    19a4:	1f 5f       	subi	r17, 0xFF	; 255
    19a6:	f2 fe       	sbrs	r15, 2
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <vfprintf+0x646>
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <vfprintf+0x644>
    19ac:	8f 2d       	mov	r24, r15
    19ae:	86 78       	andi	r24, 0x86	; 134
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <vfprintf+0x646>
    19b2:	1f 5f       	subi	r17, 0xFF	; 255
    19b4:	0f 2d       	mov	r16, r15
    19b6:	f3 fc       	sbrc	r15, 3
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <vfprintf+0x674>
    19ba:	f0 fe       	sbrs	r15, 0
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <vfprintf+0x66e>
    19be:	18 15       	cp	r17, r8
    19c0:	10 f0       	brcs	.+4      	; 0x19c6 <vfprintf+0x658>
    19c2:	9e 2c       	mov	r9, r14
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <vfprintf+0x66e>
    19c6:	9e 2c       	mov	r9, r14
    19c8:	98 0c       	add	r9, r8
    19ca:	91 1a       	sub	r9, r17
    19cc:	18 2d       	mov	r17, r8
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <vfprintf+0x66e>
    19d0:	80 e2       	ldi	r24, 0x20	; 32
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	b3 01       	movw	r22, r6
    19d6:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    19da:	1f 5f       	subi	r17, 0xFF	; 255
    19dc:	18 15       	cp	r17, r8
    19de:	c0 f3       	brcs	.-16     	; 0x19d0 <vfprintf+0x662>
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <vfprintf+0x67c>
    19e2:	18 15       	cp	r17, r8
    19e4:	10 f4       	brcc	.+4      	; 0x19ea <vfprintf+0x67c>
    19e6:	81 1a       	sub	r8, r17
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <vfprintf+0x67e>
    19ea:	88 24       	eor	r8, r8
    19ec:	04 ff       	sbrs	r16, 4
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <vfprintf+0x6a0>
    19f0:	80 e3       	ldi	r24, 0x30	; 48
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	b3 01       	movw	r22, r6
    19f6:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    19fa:	02 ff       	sbrs	r16, 2
    19fc:	1d c0       	rjmp	.+58     	; 0x1a38 <vfprintf+0x6ca>
    19fe:	01 fd       	sbrc	r16, 1
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <vfprintf+0x69a>
    1a02:	88 e7       	ldi	r24, 0x78	; 120
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <vfprintf+0x6b6>
    1a08:	88 e5       	ldi	r24, 0x58	; 88
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0b c0       	rjmp	.+22     	; 0x1a24 <vfprintf+0x6b6>
    1a0e:	80 2f       	mov	r24, r16
    1a10:	86 78       	andi	r24, 0x86	; 134
    1a12:	91 f0       	breq	.+36     	; 0x1a38 <vfprintf+0x6ca>
    1a14:	01 ff       	sbrs	r16, 1
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x6ae>
    1a18:	8b e2       	ldi	r24, 0x2B	; 43
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <vfprintf+0x6b0>
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	f7 fc       	sbrc	r15, 7
    1a20:	8d e2       	ldi	r24, 0x2D	; 45
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b3 01       	movw	r22, r6
    1a26:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x6ca>
    1a2c:	80 e3       	ldi	r24, 0x30	; 48
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	b3 01       	movw	r22, r6
    1a32:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1a36:	9a 94       	dec	r9
    1a38:	e9 14       	cp	r14, r9
    1a3a:	c0 f3       	brcs	.-16     	; 0x1a2c <vfprintf+0x6be>
    1a3c:	ea 94       	dec	r14
    1a3e:	e1 e0       	ldi	r30, 0x01	; 1
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	ec 0f       	add	r30, r28
    1a44:	fd 1f       	adc	r31, r29
    1a46:	ee 0d       	add	r30, r14
    1a48:	f1 1d       	adc	r31, r1
    1a4a:	80 81       	ld	r24, Z
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	b3 01       	movw	r22, r6
    1a50:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1a54:	ee 20       	and	r14, r14
    1a56:	91 f7       	brne	.-28     	; 0x1a3c <vfprintf+0x6ce>
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <vfprintf+0x6f8>
    1a5a:	80 e2       	ldi	r24, 0x20	; 32
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	b3 01       	movw	r22, r6
    1a60:	0e 94 a3 10 	call	0x2146	; 0x2146 <fputc>
    1a64:	8a 94       	dec	r8
    1a66:	88 20       	and	r8, r8
    1a68:	c1 f7       	brne	.-16     	; 0x1a5a <vfprintf+0x6ec>
    1a6a:	99 cc       	rjmp	.-1742   	; 0x139e <vfprintf+0x30>
    1a6c:	f3 01       	movw	r30, r6
    1a6e:	66 81       	ldd	r22, Z+6	; 0x06
    1a70:	77 81       	ldd	r23, Z+7	; 0x07
    1a72:	cb 01       	movw	r24, r22
    1a74:	61 96       	adiw	r28, 0x11	; 17
    1a76:	e2 e1       	ldi	r30, 0x12	; 18
    1a78:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__epilogue_restores__>

00001a7c <__subsf3>:
    1a7c:	50 58       	subi	r21, 0x80	; 128

00001a7e <__addsf3>:
    1a7e:	bb 27       	eor	r27, r27
    1a80:	aa 27       	eor	r26, r26
    1a82:	0e d0       	rcall	.+28     	; 0x1aa0 <__addsf3x>
    1a84:	89 c1       	rjmp	.+786    	; 0x1d98 <__fp_round>
    1a86:	7a d1       	rcall	.+756    	; 0x1d7c <__fp_pscA>
    1a88:	30 f0       	brcs	.+12     	; 0x1a96 <__addsf3+0x18>
    1a8a:	7f d1       	rcall	.+766    	; 0x1d8a <__fp_pscB>
    1a8c:	20 f0       	brcs	.+8      	; 0x1a96 <__addsf3+0x18>
    1a8e:	31 f4       	brne	.+12     	; 0x1a9c <__addsf3+0x1e>
    1a90:	9f 3f       	cpi	r25, 0xFF	; 255
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <__addsf3+0x1a>
    1a94:	1e f4       	brtc	.+6      	; 0x1a9c <__addsf3+0x1e>
    1a96:	6f c1       	rjmp	.+734    	; 0x1d76 <__fp_nan>
    1a98:	0e f4       	brtc	.+2      	; 0x1a9c <__addsf3+0x1e>
    1a9a:	e0 95       	com	r30
    1a9c:	e7 fb       	bst	r30, 7
    1a9e:	3c c1       	rjmp	.+632    	; 0x1d18 <__fp_inf>

00001aa0 <__addsf3x>:
    1aa0:	e9 2f       	mov	r30, r25
    1aa2:	8b d1       	rcall	.+790    	; 0x1dba <__fp_split3>
    1aa4:	80 f3       	brcs	.-32     	; 0x1a86 <__addsf3+0x8>
    1aa6:	ba 17       	cp	r27, r26
    1aa8:	62 07       	cpc	r22, r18
    1aaa:	73 07       	cpc	r23, r19
    1aac:	84 07       	cpc	r24, r20
    1aae:	95 07       	cpc	r25, r21
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__addsf3x+0x18>
    1ab2:	71 f4       	brne	.+28     	; 0x1ad0 <__addsf3x+0x30>
    1ab4:	9e f5       	brtc	.+102    	; 0x1b1c <__addsf3x+0x7c>
    1ab6:	ba c1       	rjmp	.+884    	; 0x1e2c <__fp_zero>
    1ab8:	0e f4       	brtc	.+2      	; 0x1abc <__addsf3x+0x1c>
    1aba:	e0 95       	com	r30
    1abc:	0b 2e       	mov	r0, r27
    1abe:	ba 2f       	mov	r27, r26
    1ac0:	a0 2d       	mov	r26, r0
    1ac2:	0b 01       	movw	r0, r22
    1ac4:	b9 01       	movw	r22, r18
    1ac6:	90 01       	movw	r18, r0
    1ac8:	0c 01       	movw	r0, r24
    1aca:	ca 01       	movw	r24, r20
    1acc:	a0 01       	movw	r20, r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	ff 27       	eor	r31, r31
    1ad2:	59 1b       	sub	r21, r25
    1ad4:	99 f0       	breq	.+38     	; 0x1afc <__addsf3x+0x5c>
    1ad6:	59 3f       	cpi	r21, 0xF9	; 249
    1ad8:	50 f4       	brcc	.+20     	; 0x1aee <__addsf3x+0x4e>
    1ada:	50 3e       	cpi	r21, 0xE0	; 224
    1adc:	68 f1       	brcs	.+90     	; 0x1b38 <__addsf3x+0x98>
    1ade:	1a 16       	cp	r1, r26
    1ae0:	f0 40       	sbci	r31, 0x00	; 0
    1ae2:	a2 2f       	mov	r26, r18
    1ae4:	23 2f       	mov	r18, r19
    1ae6:	34 2f       	mov	r19, r20
    1ae8:	44 27       	eor	r20, r20
    1aea:	58 5f       	subi	r21, 0xF8	; 248
    1aec:	f3 cf       	rjmp	.-26     	; 0x1ad4 <__addsf3x+0x34>
    1aee:	46 95       	lsr	r20
    1af0:	37 95       	ror	r19
    1af2:	27 95       	ror	r18
    1af4:	a7 95       	ror	r26
    1af6:	f0 40       	sbci	r31, 0x00	; 0
    1af8:	53 95       	inc	r21
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__addsf3x+0x4e>
    1afc:	7e f4       	brtc	.+30     	; 0x1b1c <__addsf3x+0x7c>
    1afe:	1f 16       	cp	r1, r31
    1b00:	ba 0b       	sbc	r27, r26
    1b02:	62 0b       	sbc	r22, r18
    1b04:	73 0b       	sbc	r23, r19
    1b06:	84 0b       	sbc	r24, r20
    1b08:	ba f0       	brmi	.+46     	; 0x1b38 <__addsf3x+0x98>
    1b0a:	91 50       	subi	r25, 0x01	; 1
    1b0c:	a1 f0       	breq	.+40     	; 0x1b36 <__addsf3x+0x96>
    1b0e:	ff 0f       	add	r31, r31
    1b10:	bb 1f       	adc	r27, r27
    1b12:	66 1f       	adc	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 1f       	adc	r24, r24
    1b18:	c2 f7       	brpl	.-16     	; 0x1b0a <__addsf3x+0x6a>
    1b1a:	0e c0       	rjmp	.+28     	; 0x1b38 <__addsf3x+0x98>
    1b1c:	ba 0f       	add	r27, r26
    1b1e:	62 1f       	adc	r22, r18
    1b20:	73 1f       	adc	r23, r19
    1b22:	84 1f       	adc	r24, r20
    1b24:	48 f4       	brcc	.+18     	; 0x1b38 <__addsf3x+0x98>
    1b26:	87 95       	ror	r24
    1b28:	77 95       	ror	r23
    1b2a:	67 95       	ror	r22
    1b2c:	b7 95       	ror	r27
    1b2e:	f7 95       	ror	r31
    1b30:	9e 3f       	cpi	r25, 0xFE	; 254
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <__addsf3x+0x96>
    1b34:	b3 cf       	rjmp	.-154    	; 0x1a9c <__addsf3+0x1e>
    1b36:	93 95       	inc	r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <__addsf3x+0x9e>
    1b3c:	99 27       	eor	r25, r25
    1b3e:	ee 0f       	add	r30, r30
    1b40:	97 95       	ror	r25
    1b42:	87 95       	ror	r24
    1b44:	08 95       	ret

00001b46 <__divsf3>:
    1b46:	0c d0       	rcall	.+24     	; 0x1b60 <__divsf3x>
    1b48:	27 c1       	rjmp	.+590    	; 0x1d98 <__fp_round>
    1b4a:	1f d1       	rcall	.+574    	; 0x1d8a <__fp_pscB>
    1b4c:	40 f0       	brcs	.+16     	; 0x1b5e <__divsf3+0x18>
    1b4e:	16 d1       	rcall	.+556    	; 0x1d7c <__fp_pscA>
    1b50:	30 f0       	brcs	.+12     	; 0x1b5e <__divsf3+0x18>
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <__divsf3+0x16>
    1b54:	5f 3f       	cpi	r21, 0xFF	; 255
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <__divsf3+0x18>
    1b58:	df c0       	rjmp	.+446    	; 0x1d18 <__fp_inf>
    1b5a:	51 11       	cpse	r21, r1
    1b5c:	68 c1       	rjmp	.+720    	; 0x1e2e <__fp_szero>
    1b5e:	0b c1       	rjmp	.+534    	; 0x1d76 <__fp_nan>

00001b60 <__divsf3x>:
    1b60:	2c d1       	rcall	.+600    	; 0x1dba <__fp_split3>
    1b62:	98 f3       	brcs	.-26     	; 0x1b4a <__divsf3+0x4>

00001b64 <__divsf3_pse>:
    1b64:	99 23       	and	r25, r25
    1b66:	c9 f3       	breq	.-14     	; 0x1b5a <__divsf3+0x14>
    1b68:	55 23       	and	r21, r21
    1b6a:	b1 f3       	breq	.-20     	; 0x1b58 <__divsf3+0x12>
    1b6c:	95 1b       	sub	r25, r21
    1b6e:	55 0b       	sbc	r21, r21
    1b70:	bb 27       	eor	r27, r27
    1b72:	aa 27       	eor	r26, r26
    1b74:	62 17       	cp	r22, r18
    1b76:	73 07       	cpc	r23, r19
    1b78:	84 07       	cpc	r24, r20
    1b7a:	38 f0       	brcs	.+14     	; 0x1b8a <__divsf3_pse+0x26>
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	44 1f       	adc	r20, r20
    1b86:	aa 1f       	adc	r26, r26
    1b88:	a9 f3       	breq	.-22     	; 0x1b74 <__divsf3_pse+0x10>
    1b8a:	33 d0       	rcall	.+102    	; 0x1bf2 <__divsf3_pse+0x8e>
    1b8c:	0e 2e       	mov	r0, r30
    1b8e:	3a f0       	brmi	.+14     	; 0x1b9e <__divsf3_pse+0x3a>
    1b90:	e0 e8       	ldi	r30, 0x80	; 128
    1b92:	30 d0       	rcall	.+96     	; 0x1bf4 <__divsf3_pse+0x90>
    1b94:	91 50       	subi	r25, 0x01	; 1
    1b96:	50 40       	sbci	r21, 0x00	; 0
    1b98:	e6 95       	lsr	r30
    1b9a:	00 1c       	adc	r0, r0
    1b9c:	ca f7       	brpl	.-14     	; 0x1b90 <__divsf3_pse+0x2c>
    1b9e:	29 d0       	rcall	.+82     	; 0x1bf2 <__divsf3_pse+0x8e>
    1ba0:	fe 2f       	mov	r31, r30
    1ba2:	27 d0       	rcall	.+78     	; 0x1bf2 <__divsf3_pse+0x8e>
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	bb 1f       	adc	r27, r27
    1bac:	26 17       	cp	r18, r22
    1bae:	37 07       	cpc	r19, r23
    1bb0:	48 07       	cpc	r20, r24
    1bb2:	ab 07       	cpc	r26, r27
    1bb4:	b0 e8       	ldi	r27, 0x80	; 128
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <__divsf3_pse+0x56>
    1bb8:	bb 0b       	sbc	r27, r27
    1bba:	80 2d       	mov	r24, r0
    1bbc:	bf 01       	movw	r22, r30
    1bbe:	ff 27       	eor	r31, r31
    1bc0:	93 58       	subi	r25, 0x83	; 131
    1bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc4:	2a f0       	brmi	.+10     	; 0x1bd0 <__divsf3_pse+0x6c>
    1bc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc8:	51 05       	cpc	r21, r1
    1bca:	68 f0       	brcs	.+26     	; 0x1be6 <__divsf3_pse+0x82>
    1bcc:	a5 c0       	rjmp	.+330    	; 0x1d18 <__fp_inf>
    1bce:	2f c1       	rjmp	.+606    	; 0x1e2e <__fp_szero>
    1bd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd2:	ec f3       	brlt	.-6      	; 0x1bce <__divsf3_pse+0x6a>
    1bd4:	98 3e       	cpi	r25, 0xE8	; 232
    1bd6:	dc f3       	brlt	.-10     	; 0x1bce <__divsf3_pse+0x6a>
    1bd8:	86 95       	lsr	r24
    1bda:	77 95       	ror	r23
    1bdc:	67 95       	ror	r22
    1bde:	b7 95       	ror	r27
    1be0:	f7 95       	ror	r31
    1be2:	9f 5f       	subi	r25, 0xFF	; 255
    1be4:	c9 f7       	brne	.-14     	; 0x1bd8 <__divsf3_pse+0x74>
    1be6:	88 0f       	add	r24, r24
    1be8:	91 1d       	adc	r25, r1
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret
    1bf2:	e1 e0       	ldi	r30, 0x01	; 1
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	bb 1f       	adc	r27, r27
    1bfc:	62 17       	cp	r22, r18
    1bfe:	73 07       	cpc	r23, r19
    1c00:	84 07       	cpc	r24, r20
    1c02:	ba 07       	cpc	r27, r26
    1c04:	20 f0       	brcs	.+8      	; 0x1c0e <__divsf3_pse+0xaa>
    1c06:	62 1b       	sub	r22, r18
    1c08:	73 0b       	sbc	r23, r19
    1c0a:	84 0b       	sbc	r24, r20
    1c0c:	ba 0b       	sbc	r27, r26
    1c0e:	ee 1f       	adc	r30, r30
    1c10:	88 f7       	brcc	.-30     	; 0x1bf4 <__divsf3_pse+0x90>
    1c12:	e0 95       	com	r30
    1c14:	08 95       	ret

00001c16 <__fixsfsi>:
    1c16:	04 d0       	rcall	.+8      	; 0x1c20 <__fixunssfsi>
    1c18:	68 94       	set
    1c1a:	b1 11       	cpse	r27, r1
    1c1c:	08 c1       	rjmp	.+528    	; 0x1e2e <__fp_szero>
    1c1e:	08 95       	ret

00001c20 <__fixunssfsi>:
    1c20:	d4 d0       	rcall	.+424    	; 0x1dca <__fp_splitA>
    1c22:	88 f0       	brcs	.+34     	; 0x1c46 <__fixunssfsi+0x26>
    1c24:	9f 57       	subi	r25, 0x7F	; 127
    1c26:	90 f0       	brcs	.+36     	; 0x1c4c <__fixunssfsi+0x2c>
    1c28:	b9 2f       	mov	r27, r25
    1c2a:	99 27       	eor	r25, r25
    1c2c:	b7 51       	subi	r27, 0x17	; 23
    1c2e:	a0 f0       	brcs	.+40     	; 0x1c58 <__fixunssfsi+0x38>
    1c30:	d1 f0       	breq	.+52     	; 0x1c66 <__fixunssfsi+0x46>
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	1a f0       	brmi	.+6      	; 0x1c42 <__fixunssfsi+0x22>
    1c3c:	ba 95       	dec	r27
    1c3e:	c9 f7       	brne	.-14     	; 0x1c32 <__fixunssfsi+0x12>
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <__fixunssfsi+0x46>
    1c42:	b1 30       	cpi	r27, 0x01	; 1
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <__fixunssfsi+0x46>
    1c46:	f2 d0       	rcall	.+484    	; 0x1e2c <__fp_zero>
    1c48:	b1 e0       	ldi	r27, 0x01	; 1
    1c4a:	08 95       	ret
    1c4c:	ef c0       	rjmp	.+478    	; 0x1e2c <__fp_zero>
    1c4e:	67 2f       	mov	r22, r23
    1c50:	78 2f       	mov	r23, r24
    1c52:	88 27       	eor	r24, r24
    1c54:	b8 5f       	subi	r27, 0xF8	; 248
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <__fixunssfsi+0x46>
    1c58:	b9 3f       	cpi	r27, 0xF9	; 249
    1c5a:	cc f3       	brlt	.-14     	; 0x1c4e <__fixunssfsi+0x2e>
    1c5c:	86 95       	lsr	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b3 95       	inc	r27
    1c64:	d9 f7       	brne	.-10     	; 0x1c5c <__fixunssfsi+0x3c>
    1c66:	3e f4       	brtc	.+14     	; 0x1c76 <__fixunssfsi+0x56>
    1c68:	90 95       	com	r25
    1c6a:	80 95       	com	r24
    1c6c:	70 95       	com	r23
    1c6e:	61 95       	neg	r22
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	08 95       	ret

00001c78 <__floatunsisf>:
    1c78:	e8 94       	clt
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <__floatsisf+0x12>

00001c7c <__floatsisf>:
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	3e f4       	brtc	.+14     	; 0x1c8e <__floatsisf+0x12>
    1c80:	90 95       	com	r25
    1c82:	80 95       	com	r24
    1c84:	70 95       	com	r23
    1c86:	61 95       	neg	r22
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	99 23       	and	r25, r25
    1c90:	a9 f0       	breq	.+42     	; 0x1cbc <__floatsisf+0x40>
    1c92:	f9 2f       	mov	r31, r25
    1c94:	96 e9       	ldi	r25, 0x96	; 150
    1c96:	bb 27       	eor	r27, r27
    1c98:	93 95       	inc	r25
    1c9a:	f6 95       	lsr	r31
    1c9c:	87 95       	ror	r24
    1c9e:	77 95       	ror	r23
    1ca0:	67 95       	ror	r22
    1ca2:	b7 95       	ror	r27
    1ca4:	f1 11       	cpse	r31, r1
    1ca6:	f8 cf       	rjmp	.-16     	; 0x1c98 <__floatsisf+0x1c>
    1ca8:	fa f4       	brpl	.+62     	; 0x1ce8 <__floatsisf+0x6c>
    1caa:	bb 0f       	add	r27, r27
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <__floatsisf+0x36>
    1cae:	60 ff       	sbrs	r22, 0
    1cb0:	1b c0       	rjmp	.+54     	; 0x1ce8 <__floatsisf+0x6c>
    1cb2:	6f 5f       	subi	r22, 0xFF	; 255
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	16 c0       	rjmp	.+44     	; 0x1ce8 <__floatsisf+0x6c>
    1cbc:	88 23       	and	r24, r24
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <__floatsisf+0x48>
    1cc0:	96 e9       	ldi	r25, 0x96	; 150
    1cc2:	11 c0       	rjmp	.+34     	; 0x1ce6 <__floatsisf+0x6a>
    1cc4:	77 23       	and	r23, r23
    1cc6:	21 f0       	breq	.+8      	; 0x1cd0 <__floatsisf+0x54>
    1cc8:	9e e8       	ldi	r25, 0x8E	; 142
    1cca:	87 2f       	mov	r24, r23
    1ccc:	76 2f       	mov	r23, r22
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <__floatsisf+0x5e>
    1cd0:	66 23       	and	r22, r22
    1cd2:	71 f0       	breq	.+28     	; 0x1cf0 <__floatsisf+0x74>
    1cd4:	96 e8       	ldi	r25, 0x86	; 134
    1cd6:	86 2f       	mov	r24, r22
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	2a f0       	brmi	.+10     	; 0x1ce8 <__floatsisf+0x6c>
    1cde:	9a 95       	dec	r25
    1ce0:	66 0f       	add	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	da f7       	brpl	.-10     	; 0x1cde <__floatsisf+0x62>
    1ce8:	88 0f       	add	r24, r24
    1cea:	96 95       	lsr	r25
    1cec:	87 95       	ror	r24
    1cee:	97 f9       	bld	r25, 7
    1cf0:	08 95       	ret

00001cf2 <floor>:
    1cf2:	85 d0       	rcall	.+266    	; 0x1dfe <__fp_trunc>
    1cf4:	80 f0       	brcs	.+32     	; 0x1d16 <floor+0x24>
    1cf6:	9f 37       	cpi	r25, 0x7F	; 127
    1cf8:	40 f4       	brcc	.+16     	; 0x1d0a <floor+0x18>
    1cfa:	91 11       	cpse	r25, r1
    1cfc:	0e f0       	brts	.+2      	; 0x1d00 <floor+0xe>
    1cfe:	97 c0       	rjmp	.+302    	; 0x1e2e <__fp_szero>
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	9f eb       	ldi	r25, 0xBF	; 191
    1d08:	08 95       	ret
    1d0a:	26 f4       	brtc	.+8      	; 0x1d14 <floor+0x22>
    1d0c:	1b 16       	cp	r1, r27
    1d0e:	61 1d       	adc	r22, r1
    1d10:	71 1d       	adc	r23, r1
    1d12:	81 1d       	adc	r24, r1
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <__fp_mintl>
    1d16:	21 c0       	rjmp	.+66     	; 0x1d5a <__fp_mpack>

00001d18 <__fp_inf>:
    1d18:	97 f9       	bld	r25, 7
    1d1a:	9f 67       	ori	r25, 0x7F	; 127
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	08 95       	ret

00001d24 <__fp_mintl>:
    1d24:	88 23       	and	r24, r24
    1d26:	71 f4       	brne	.+28     	; 0x1d44 <__fp_mintl+0x20>
    1d28:	77 23       	and	r23, r23
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <__fp_mintl+0x10>
    1d2c:	98 50       	subi	r25, 0x08	; 8
    1d2e:	87 2b       	or	r24, r23
    1d30:	76 2f       	mov	r23, r22
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <__fp_mintl+0x1e>
    1d34:	66 23       	and	r22, r22
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <__fp_mintl+0x18>
    1d38:	99 27       	eor	r25, r25
    1d3a:	0d c0       	rjmp	.+26     	; 0x1d56 <__fp_mintl+0x32>
    1d3c:	90 51       	subi	r25, 0x10	; 16
    1d3e:	86 2b       	or	r24, r22
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	2a f0       	brmi	.+10     	; 0x1d50 <__fp_mintl+0x2c>
    1d46:	9a 95       	dec	r25
    1d48:	66 0f       	add	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	da f7       	brpl	.-10     	; 0x1d46 <__fp_mintl+0x22>
    1d50:	88 0f       	add	r24, r24
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__fp_mpack>:
    1d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5c:	31 f0       	breq	.+12     	; 0x1d6a <__fp_mpack_finite+0xc>

00001d5e <__fp_mpack_finite>:
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	20 f4       	brcc	.+8      	; 0x1d6a <__fp_mpack_finite+0xc>
    1d62:	87 95       	ror	r24
    1d64:	77 95       	ror	r23
    1d66:	67 95       	ror	r22
    1d68:	b7 95       	ror	r27
    1d6a:	88 0f       	add	r24, r24
    1d6c:	91 1d       	adc	r25, r1
    1d6e:	96 95       	lsr	r25
    1d70:	87 95       	ror	r24
    1d72:	97 f9       	bld	r25, 7
    1d74:	08 95       	ret

00001d76 <__fp_nan>:
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	80 ec       	ldi	r24, 0xC0	; 192
    1d7a:	08 95       	ret

00001d7c <__fp_pscA>:
    1d7c:	00 24       	eor	r0, r0
    1d7e:	0a 94       	dec	r0
    1d80:	16 16       	cp	r1, r22
    1d82:	17 06       	cpc	r1, r23
    1d84:	18 06       	cpc	r1, r24
    1d86:	09 06       	cpc	r0, r25
    1d88:	08 95       	ret

00001d8a <__fp_pscB>:
    1d8a:	00 24       	eor	r0, r0
    1d8c:	0a 94       	dec	r0
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	14 06       	cpc	r1, r20
    1d94:	05 06       	cpc	r0, r21
    1d96:	08 95       	ret

00001d98 <__fp_round>:
    1d98:	09 2e       	mov	r0, r25
    1d9a:	03 94       	inc	r0
    1d9c:	00 0c       	add	r0, r0
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <__fp_round+0xc>
    1da0:	88 23       	and	r24, r24
    1da2:	52 f0       	brmi	.+20     	; 0x1db8 <__fp_round+0x20>
    1da4:	bb 0f       	add	r27, r27
    1da6:	40 f4       	brcc	.+16     	; 0x1db8 <__fp_round+0x20>
    1da8:	bf 2b       	or	r27, r31
    1daa:	11 f4       	brne	.+4      	; 0x1db0 <__fp_round+0x18>
    1dac:	60 ff       	sbrs	r22, 0
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <__fp_round+0x20>
    1db0:	6f 5f       	subi	r22, 0xFF	; 255
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	8f 4f       	sbci	r24, 0xFF	; 255
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	08 95       	ret

00001dba <__fp_split3>:
    1dba:	57 fd       	sbrc	r21, 7
    1dbc:	90 58       	subi	r25, 0x80	; 128
    1dbe:	44 0f       	add	r20, r20
    1dc0:	55 1f       	adc	r21, r21
    1dc2:	59 f0       	breq	.+22     	; 0x1dda <__fp_splitA+0x10>
    1dc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc6:	71 f0       	breq	.+28     	; 0x1de4 <__fp_splitA+0x1a>
    1dc8:	47 95       	ror	r20

00001dca <__fp_splitA>:
    1dca:	88 0f       	add	r24, r24
    1dcc:	97 fb       	bst	r25, 7
    1dce:	99 1f       	adc	r25, r25
    1dd0:	61 f0       	breq	.+24     	; 0x1dea <__fp_splitA+0x20>
    1dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd4:	79 f0       	breq	.+30     	; 0x1df4 <__fp_splitA+0x2a>
    1dd6:	87 95       	ror	r24
    1dd8:	08 95       	ret
    1dda:	12 16       	cp	r1, r18
    1ddc:	13 06       	cpc	r1, r19
    1dde:	14 06       	cpc	r1, r20
    1de0:	55 1f       	adc	r21, r21
    1de2:	f2 cf       	rjmp	.-28     	; 0x1dc8 <__fp_split3+0xe>
    1de4:	46 95       	lsr	r20
    1de6:	f1 df       	rcall	.-30     	; 0x1dca <__fp_splitA>
    1de8:	08 c0       	rjmp	.+16     	; 0x1dfa <__fp_splitA+0x30>
    1dea:	16 16       	cp	r1, r22
    1dec:	17 06       	cpc	r1, r23
    1dee:	18 06       	cpc	r1, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	f1 cf       	rjmp	.-30     	; 0x1dd6 <__fp_splitA+0xc>
    1df4:	86 95       	lsr	r24
    1df6:	71 05       	cpc	r23, r1
    1df8:	61 05       	cpc	r22, r1
    1dfa:	08 94       	sec
    1dfc:	08 95       	ret

00001dfe <__fp_trunc>:
    1dfe:	e5 df       	rcall	.-54     	; 0x1dca <__fp_splitA>
    1e00:	a0 f0       	brcs	.+40     	; 0x1e2a <__fp_trunc+0x2c>
    1e02:	be e7       	ldi	r27, 0x7E	; 126
    1e04:	b9 17       	cp	r27, r25
    1e06:	88 f4       	brcc	.+34     	; 0x1e2a <__fp_trunc+0x2c>
    1e08:	bb 27       	eor	r27, r27
    1e0a:	9f 38       	cpi	r25, 0x8F	; 143
    1e0c:	60 f4       	brcc	.+24     	; 0x1e26 <__fp_trunc+0x28>
    1e0e:	16 16       	cp	r1, r22
    1e10:	b1 1d       	adc	r27, r1
    1e12:	67 2f       	mov	r22, r23
    1e14:	78 2f       	mov	r23, r24
    1e16:	88 27       	eor	r24, r24
    1e18:	98 5f       	subi	r25, 0xF8	; 248
    1e1a:	f7 cf       	rjmp	.-18     	; 0x1e0a <__fp_trunc+0xc>
    1e1c:	86 95       	lsr	r24
    1e1e:	77 95       	ror	r23
    1e20:	67 95       	ror	r22
    1e22:	b1 1d       	adc	r27, r1
    1e24:	93 95       	inc	r25
    1e26:	96 39       	cpi	r25, 0x96	; 150
    1e28:	c8 f3       	brcs	.-14     	; 0x1e1c <__fp_trunc+0x1e>
    1e2a:	08 95       	ret

00001e2c <__fp_zero>:
    1e2c:	e8 94       	clt

00001e2e <__fp_szero>:
    1e2e:	bb 27       	eor	r27, r27
    1e30:	66 27       	eor	r22, r22
    1e32:	77 27       	eor	r23, r23
    1e34:	cb 01       	movw	r24, r22
    1e36:	97 f9       	bld	r25, 7
    1e38:	08 95       	ret

00001e3a <__divmodhi4>:
    1e3a:	97 fb       	bst	r25, 7
    1e3c:	09 2e       	mov	r0, r25
    1e3e:	07 26       	eor	r0, r23
    1e40:	0a d0       	rcall	.+20     	; 0x1e56 <__divmodhi4_neg1>
    1e42:	77 fd       	sbrc	r23, 7
    1e44:	04 d0       	rcall	.+8      	; 0x1e4e <__divmodhi4_neg2>
    1e46:	43 d0       	rcall	.+134    	; 0x1ece <__udivmodhi4>
    1e48:	06 d0       	rcall	.+12     	; 0x1e56 <__divmodhi4_neg1>
    1e4a:	00 20       	and	r0, r0
    1e4c:	1a f4       	brpl	.+6      	; 0x1e54 <__divmodhi4_exit>

00001e4e <__divmodhi4_neg2>:
    1e4e:	70 95       	com	r23
    1e50:	61 95       	neg	r22
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255

00001e54 <__divmodhi4_exit>:
    1e54:	08 95       	ret

00001e56 <__divmodhi4_neg1>:
    1e56:	f6 f7       	brtc	.-4      	; 0x1e54 <__divmodhi4_exit>
    1e58:	90 95       	com	r25
    1e5a:	81 95       	neg	r24
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	08 95       	ret

00001e60 <__prologue_saves__>:
    1e60:	2f 92       	push	r2
    1e62:	3f 92       	push	r3
    1e64:	4f 92       	push	r4
    1e66:	5f 92       	push	r5
    1e68:	6f 92       	push	r6
    1e6a:	7f 92       	push	r7
    1e6c:	8f 92       	push	r8
    1e6e:	9f 92       	push	r9
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	ca 1b       	sub	r28, r26
    1e8a:	db 0b       	sbc	r29, r27
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	09 94       	ijmp

00001e98 <__epilogue_restores__>:
    1e98:	2a 88       	ldd	r2, Y+18	; 0x12
    1e9a:	39 88       	ldd	r3, Y+17	; 0x11
    1e9c:	48 88       	ldd	r4, Y+16	; 0x10
    1e9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ea0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ea2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ea4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ea6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ea8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eaa:	b9 84       	ldd	r11, Y+9	; 0x09
    1eac:	c8 84       	ldd	r12, Y+8	; 0x08
    1eae:	df 80       	ldd	r13, Y+7	; 0x07
    1eb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1eb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1eb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1eb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eba:	b9 81       	ldd	r27, Y+1	; 0x01
    1ebc:	ce 0f       	add	r28, r30
    1ebe:	d1 1d       	adc	r29, r1
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	ed 01       	movw	r28, r26
    1ecc:	08 95       	ret

00001ece <__udivmodhi4>:
    1ece:	aa 1b       	sub	r26, r26
    1ed0:	bb 1b       	sub	r27, r27
    1ed2:	51 e1       	ldi	r21, 0x11	; 17
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <__udivmodhi4_ep>

00001ed6 <__udivmodhi4_loop>:
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	a6 17       	cp	r26, r22
    1edc:	b7 07       	cpc	r27, r23
    1ede:	10 f0       	brcs	.+4      	; 0x1ee4 <__udivmodhi4_ep>
    1ee0:	a6 1b       	sub	r26, r22
    1ee2:	b7 0b       	sbc	r27, r23

00001ee4 <__udivmodhi4_ep>:
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	5a 95       	dec	r21
    1eea:	a9 f7       	brne	.-22     	; 0x1ed6 <__udivmodhi4_loop>
    1eec:	80 95       	com	r24
    1eee:	90 95       	com	r25
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	08 95       	ret

00001ef6 <atof>:
    1ef6:	66 27       	eor	r22, r22
    1ef8:	77 27       	eor	r23, r23
    1efa:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <strtod>

00001efe <atoi>:
    1efe:	fc 01       	movw	r30, r24
    1f00:	88 27       	eor	r24, r24
    1f02:	99 27       	eor	r25, r25
    1f04:	e8 94       	clt
    1f06:	21 91       	ld	r18, Z+
    1f08:	20 32       	cpi	r18, 0x20	; 32
    1f0a:	e9 f3       	breq	.-6      	; 0x1f06 <atoi+0x8>
    1f0c:	29 30       	cpi	r18, 0x09	; 9
    1f0e:	10 f0       	brcs	.+4      	; 0x1f14 <atoi+0x16>
    1f10:	2e 30       	cpi	r18, 0x0E	; 14
    1f12:	c8 f3       	brcs	.-14     	; 0x1f06 <atoi+0x8>
    1f14:	2b 32       	cpi	r18, 0x2B	; 43
    1f16:	41 f0       	breq	.+16     	; 0x1f28 <atoi+0x2a>
    1f18:	2d 32       	cpi	r18, 0x2D	; 45
    1f1a:	39 f4       	brne	.+14     	; 0x1f2a <atoi+0x2c>
    1f1c:	68 94       	set
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <atoi+0x2a>
    1f20:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulhi_const_10>
    1f24:	82 0f       	add	r24, r18
    1f26:	91 1d       	adc	r25, r1
    1f28:	21 91       	ld	r18, Z+
    1f2a:	20 53       	subi	r18, 0x30	; 48
    1f2c:	2a 30       	cpi	r18, 0x0A	; 10
    1f2e:	c0 f3       	brcs	.-16     	; 0x1f20 <atoi+0x22>
    1f30:	1e f4       	brtc	.+6      	; 0x1f38 <atoi+0x3a>
    1f32:	90 95       	com	r25
    1f34:	81 95       	neg	r24
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	08 95       	ret

00001f3a <__ftoa_engine>:
    1f3a:	28 30       	cpi	r18, 0x08	; 8
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <__ftoa_engine+0x6>
    1f3e:	27 e0       	ldi	r18, 0x07	; 7
    1f40:	33 27       	eor	r19, r19
    1f42:	da 01       	movw	r26, r20
    1f44:	99 0f       	add	r25, r25
    1f46:	31 1d       	adc	r19, r1
    1f48:	87 fd       	sbrc	r24, 7
    1f4a:	91 60       	ori	r25, 0x01	; 1
    1f4c:	00 96       	adiw	r24, 0x00	; 0
    1f4e:	61 05       	cpc	r22, r1
    1f50:	71 05       	cpc	r23, r1
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <__ftoa_engine+0x28>
    1f54:	32 60       	ori	r19, 0x02	; 2
    1f56:	2e 5f       	subi	r18, 0xFE	; 254
    1f58:	3d 93       	st	X+, r19
    1f5a:	30 e3       	ldi	r19, 0x30	; 48
    1f5c:	2a 95       	dec	r18
    1f5e:	e1 f7       	brne	.-8      	; 0x1f58 <__ftoa_engine+0x1e>
    1f60:	08 95       	ret
    1f62:	9f 3f       	cpi	r25, 0xFF	; 255
    1f64:	30 f0       	brcs	.+12     	; 0x1f72 <__ftoa_engine+0x38>
    1f66:	80 38       	cpi	r24, 0x80	; 128
    1f68:	71 05       	cpc	r23, r1
    1f6a:	61 05       	cpc	r22, r1
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <__ftoa_engine+0x36>
    1f6e:	3c 5f       	subi	r19, 0xFC	; 252
    1f70:	3c 5f       	subi	r19, 0xFC	; 252
    1f72:	3d 93       	st	X+, r19
    1f74:	91 30       	cpi	r25, 0x01	; 1
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <__ftoa_engine+0x40>
    1f78:	80 68       	ori	r24, 0x80	; 128
    1f7a:	91 1d       	adc	r25, r1
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	1f 93       	push	r17
    1f82:	0f 93       	push	r16
    1f84:	ff 92       	push	r15
    1f86:	ef 92       	push	r14
    1f88:	19 2f       	mov	r17, r25
    1f8a:	98 7f       	andi	r25, 0xF8	; 248
    1f8c:	96 95       	lsr	r25
    1f8e:	e9 2f       	mov	r30, r25
    1f90:	96 95       	lsr	r25
    1f92:	96 95       	lsr	r25
    1f94:	e9 0f       	add	r30, r25
    1f96:	ff 27       	eor	r31, r31
    1f98:	ea 54       	subi	r30, 0x4A	; 74
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	99 27       	eor	r25, r25
    1f9e:	33 27       	eor	r19, r19
    1fa0:	ee 24       	eor	r14, r14
    1fa2:	ff 24       	eor	r15, r15
    1fa4:	a7 01       	movw	r20, r14
    1fa6:	e7 01       	movw	r28, r14
    1fa8:	05 90       	lpm	r0, Z+
    1faa:	08 94       	sec
    1fac:	07 94       	ror	r0
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <__ftoa_engine+0x80>
    1fb0:	36 0f       	add	r19, r22
    1fb2:	e7 1e       	adc	r14, r23
    1fb4:	f8 1e       	adc	r15, r24
    1fb6:	49 1f       	adc	r20, r25
    1fb8:	51 1d       	adc	r21, r1
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	06 94       	lsr	r0
    1fc4:	a1 f7       	brne	.-24     	; 0x1fae <__ftoa_engine+0x74>
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	07 94       	ror	r0
    1fca:	28 f4       	brcc	.+10     	; 0x1fd6 <__ftoa_engine+0x9c>
    1fcc:	e7 0e       	add	r14, r23
    1fce:	f8 1e       	adc	r15, r24
    1fd0:	49 1f       	adc	r20, r25
    1fd2:	56 1f       	adc	r21, r22
    1fd4:	c1 1d       	adc	r28, r1
    1fd6:	77 0f       	add	r23, r23
    1fd8:	88 1f       	adc	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	66 1f       	adc	r22, r22
    1fde:	06 94       	lsr	r0
    1fe0:	a1 f7       	brne	.-24     	; 0x1fca <__ftoa_engine+0x90>
    1fe2:	05 90       	lpm	r0, Z+
    1fe4:	07 94       	ror	r0
    1fe6:	28 f4       	brcc	.+10     	; 0x1ff2 <__ftoa_engine+0xb8>
    1fe8:	f8 0e       	add	r15, r24
    1fea:	49 1f       	adc	r20, r25
    1fec:	56 1f       	adc	r21, r22
    1fee:	c7 1f       	adc	r28, r23
    1ff0:	d1 1d       	adc	r29, r1
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	66 1f       	adc	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	06 94       	lsr	r0
    1ffc:	a1 f7       	brne	.-24     	; 0x1fe6 <__ftoa_engine+0xac>
    1ffe:	05 90       	lpm	r0, Z+
    2000:	07 94       	ror	r0
    2002:	20 f4       	brcc	.+8      	; 0x200c <__ftoa_engine+0xd2>
    2004:	49 0f       	add	r20, r25
    2006:	56 1f       	adc	r21, r22
    2008:	c7 1f       	adc	r28, r23
    200a:	d8 1f       	adc	r29, r24
    200c:	99 0f       	add	r25, r25
    200e:	66 1f       	adc	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	06 94       	lsr	r0
    2016:	a9 f7       	brne	.-22     	; 0x2002 <__ftoa_engine+0xc8>
    2018:	84 91       	lpm	r24, Z+
    201a:	10 95       	com	r17
    201c:	17 70       	andi	r17, 0x07	; 7
    201e:	41 f0       	breq	.+16     	; 0x2030 <__ftoa_engine+0xf6>
    2020:	d6 95       	lsr	r29
    2022:	c7 95       	ror	r28
    2024:	57 95       	ror	r21
    2026:	47 95       	ror	r20
    2028:	f7 94       	ror	r15
    202a:	e7 94       	ror	r14
    202c:	1a 95       	dec	r17
    202e:	c1 f7       	brne	.-16     	; 0x2020 <__ftoa_engine+0xe6>
    2030:	ec e5       	ldi	r30, 0x5C	; 92
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	68 94       	set
    2036:	15 90       	lpm	r1, Z+
    2038:	15 91       	lpm	r17, Z+
    203a:	35 91       	lpm	r19, Z+
    203c:	65 91       	lpm	r22, Z+
    203e:	95 91       	lpm	r25, Z+
    2040:	05 90       	lpm	r0, Z+
    2042:	7f e2       	ldi	r23, 0x2F	; 47
    2044:	73 95       	inc	r23
    2046:	e1 18       	sub	r14, r1
    2048:	f1 0a       	sbc	r15, r17
    204a:	43 0b       	sbc	r20, r19
    204c:	56 0b       	sbc	r21, r22
    204e:	c9 0b       	sbc	r28, r25
    2050:	d0 09       	sbc	r29, r0
    2052:	c0 f7       	brcc	.-16     	; 0x2044 <__ftoa_engine+0x10a>
    2054:	e1 0c       	add	r14, r1
    2056:	f1 1e       	adc	r15, r17
    2058:	43 1f       	adc	r20, r19
    205a:	56 1f       	adc	r21, r22
    205c:	c9 1f       	adc	r28, r25
    205e:	d0 1d       	adc	r29, r0
    2060:	7e f4       	brtc	.+30     	; 0x2080 <__ftoa_engine+0x146>
    2062:	70 33       	cpi	r23, 0x30	; 48
    2064:	11 f4       	brne	.+4      	; 0x206a <__ftoa_engine+0x130>
    2066:	8a 95       	dec	r24
    2068:	e6 cf       	rjmp	.-52     	; 0x2036 <__ftoa_engine+0xfc>
    206a:	e8 94       	clt
    206c:	01 50       	subi	r16, 0x01	; 1
    206e:	30 f0       	brcs	.+12     	; 0x207c <__ftoa_engine+0x142>
    2070:	08 0f       	add	r16, r24
    2072:	0a f4       	brpl	.+2      	; 0x2076 <__ftoa_engine+0x13c>
    2074:	00 27       	eor	r16, r16
    2076:	02 17       	cp	r16, r18
    2078:	08 f4       	brcc	.+2      	; 0x207c <__ftoa_engine+0x142>
    207a:	20 2f       	mov	r18, r16
    207c:	23 95       	inc	r18
    207e:	02 2f       	mov	r16, r18
    2080:	7a 33       	cpi	r23, 0x3A	; 58
    2082:	28 f0       	brcs	.+10     	; 0x208e <__ftoa_engine+0x154>
    2084:	79 e3       	ldi	r23, 0x39	; 57
    2086:	7d 93       	st	X+, r23
    2088:	2a 95       	dec	r18
    208a:	e9 f7       	brne	.-6      	; 0x2086 <__ftoa_engine+0x14c>
    208c:	10 c0       	rjmp	.+32     	; 0x20ae <__ftoa_engine+0x174>
    208e:	7d 93       	st	X+, r23
    2090:	2a 95       	dec	r18
    2092:	89 f6       	brne	.-94     	; 0x2036 <__ftoa_engine+0xfc>
    2094:	06 94       	lsr	r0
    2096:	97 95       	ror	r25
    2098:	67 95       	ror	r22
    209a:	37 95       	ror	r19
    209c:	17 95       	ror	r17
    209e:	17 94       	ror	r1
    20a0:	e1 18       	sub	r14, r1
    20a2:	f1 0a       	sbc	r15, r17
    20a4:	43 0b       	sbc	r20, r19
    20a6:	56 0b       	sbc	r21, r22
    20a8:	c9 0b       	sbc	r28, r25
    20aa:	d0 09       	sbc	r29, r0
    20ac:	98 f0       	brcs	.+38     	; 0x20d4 <__ftoa_engine+0x19a>
    20ae:	23 95       	inc	r18
    20b0:	7e 91       	ld	r23, -X
    20b2:	73 95       	inc	r23
    20b4:	7a 33       	cpi	r23, 0x3A	; 58
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <__ftoa_engine+0x180>
    20b8:	70 e3       	ldi	r23, 0x30	; 48
    20ba:	7c 93       	st	X, r23
    20bc:	20 13       	cpse	r18, r16
    20be:	b8 f7       	brcc	.-18     	; 0x20ae <__ftoa_engine+0x174>
    20c0:	7e 91       	ld	r23, -X
    20c2:	70 61       	ori	r23, 0x10	; 16
    20c4:	7d 93       	st	X+, r23
    20c6:	30 f0       	brcs	.+12     	; 0x20d4 <__ftoa_engine+0x19a>
    20c8:	83 95       	inc	r24
    20ca:	71 e3       	ldi	r23, 0x31	; 49
    20cc:	7d 93       	st	X+, r23
    20ce:	70 e3       	ldi	r23, 0x30	; 48
    20d0:	2a 95       	dec	r18
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <__ftoa_engine+0x192>
    20d4:	11 24       	eor	r1, r1
    20d6:	ef 90       	pop	r14
    20d8:	ff 90       	pop	r15
    20da:	0f 91       	pop	r16
    20dc:	1f 91       	pop	r17
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	99 27       	eor	r25, r25
    20e4:	87 fd       	sbrc	r24, 7
    20e6:	90 95       	com	r25
    20e8:	08 95       	ret

000020ea <strnlen_P>:
    20ea:	fc 01       	movw	r30, r24
    20ec:	05 90       	lpm	r0, Z+
    20ee:	61 50       	subi	r22, 0x01	; 1
    20f0:	70 40       	sbci	r23, 0x00	; 0
    20f2:	01 10       	cpse	r0, r1
    20f4:	d8 f7       	brcc	.-10     	; 0x20ec <strnlen_P+0x2>
    20f6:	80 95       	com	r24
    20f8:	90 95       	com	r25
    20fa:	8e 0f       	add	r24, r30
    20fc:	9f 1f       	adc	r25, r31
    20fe:	08 95       	ret

00002100 <strcmp>:
    2100:	fb 01       	movw	r30, r22
    2102:	dc 01       	movw	r26, r24
    2104:	8d 91       	ld	r24, X+
    2106:	01 90       	ld	r0, Z+
    2108:	80 19       	sub	r24, r0
    210a:	01 10       	cpse	r0, r1
    210c:	d9 f3       	breq	.-10     	; 0x2104 <strcmp+0x4>
    210e:	99 0b       	sbc	r25, r25
    2110:	08 95       	ret

00002112 <strcpy>:
    2112:	fb 01       	movw	r30, r22
    2114:	dc 01       	movw	r26, r24
    2116:	01 90       	ld	r0, Z+
    2118:	0d 92       	st	X+, r0
    211a:	00 20       	and	r0, r0
    211c:	e1 f7       	brne	.-8      	; 0x2116 <strcpy+0x4>
    211e:	08 95       	ret

00002120 <strnlen>:
    2120:	fc 01       	movw	r30, r24
    2122:	61 50       	subi	r22, 0x01	; 1
    2124:	70 40       	sbci	r23, 0x00	; 0
    2126:	01 90       	ld	r0, Z+
    2128:	01 10       	cpse	r0, r1
    212a:	d8 f7       	brcc	.-10     	; 0x2122 <strnlen+0x2>
    212c:	80 95       	com	r24
    212e:	90 95       	com	r25
    2130:	8e 0f       	add	r24, r30
    2132:	9f 1f       	adc	r25, r31
    2134:	08 95       	ret

00002136 <__mulhi_const_10>:
    2136:	7a e0       	ldi	r23, 0x0A	; 10
    2138:	97 9f       	mul	r25, r23
    213a:	90 2d       	mov	r25, r0
    213c:	87 9f       	mul	r24, r23
    213e:	80 2d       	mov	r24, r0
    2140:	91 0d       	add	r25, r1
    2142:	11 24       	eor	r1, r1
    2144:	08 95       	ret

00002146 <fputc>:
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	8c 01       	movw	r16, r24
    2150:	eb 01       	movw	r28, r22
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	81 ff       	sbrs	r24, 1
    2156:	1b c0       	rjmp	.+54     	; 0x218e <fputc+0x48>
    2158:	82 ff       	sbrs	r24, 2
    215a:	0d c0       	rjmp	.+26     	; 0x2176 <fputc+0x30>
    215c:	2e 81       	ldd	r18, Y+6	; 0x06
    215e:	3f 81       	ldd	r19, Y+7	; 0x07
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	28 17       	cp	r18, r24
    2166:	39 07       	cpc	r19, r25
    2168:	64 f4       	brge	.+24     	; 0x2182 <fputc+0x3c>
    216a:	e8 81       	ld	r30, Y
    216c:	f9 81       	ldd	r31, Y+1	; 0x01
    216e:	01 93       	st	Z+, r16
    2170:	f9 83       	std	Y+1, r31	; 0x01
    2172:	e8 83       	st	Y, r30
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <fputc+0x3c>
    2176:	e8 85       	ldd	r30, Y+8	; 0x08
    2178:	f9 85       	ldd	r31, Y+9	; 0x09
    217a:	80 2f       	mov	r24, r16
    217c:	09 95       	icall
    217e:	89 2b       	or	r24, r25
    2180:	31 f4       	brne	.+12     	; 0x218e <fputc+0x48>
    2182:	8e 81       	ldd	r24, Y+6	; 0x06
    2184:	9f 81       	ldd	r25, Y+7	; 0x07
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	9f 83       	std	Y+7, r25	; 0x07
    218a:	8e 83       	std	Y+6, r24	; 0x06
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <fputc+0x4c>
    218e:	0f ef       	ldi	r16, 0xFF	; 255
    2190:	1f ef       	ldi	r17, 0xFF	; 255
    2192:	c8 01       	movw	r24, r16
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <sprintf>:
    219e:	ae e0       	ldi	r26, 0x0E	; 14
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 ed       	ldi	r30, 0xD5	; 213
    21a4:	f0 e1       	ldi	r31, 0x10	; 16
    21a6:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__prologue_saves__+0x1c>
    21aa:	0d 89       	ldd	r16, Y+21	; 0x15
    21ac:	1e 89       	ldd	r17, Y+22	; 0x16
    21ae:	86 e0       	ldi	r24, 0x06	; 6
    21b0:	8c 83       	std	Y+4, r24	; 0x04
    21b2:	1a 83       	std	Y+2, r17	; 0x02
    21b4:	09 83       	std	Y+1, r16	; 0x01
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f e7       	ldi	r25, 0x7F	; 127
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	9e 01       	movw	r18, r28
    21c0:	27 5e       	subi	r18, 0xE7	; 231
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	6f 89       	ldd	r22, Y+23	; 0x17
    21ca:	78 8d       	ldd	r23, Y+24	; 0x18
    21cc:	a9 01       	movw	r20, r18
    21ce:	0e 94 b7 09 	call	0x136e	; 0x136e <vfprintf>
    21d2:	2f 81       	ldd	r18, Y+7	; 0x07
    21d4:	38 85       	ldd	r19, Y+8	; 0x08
    21d6:	02 0f       	add	r16, r18
    21d8:	13 1f       	adc	r17, r19
    21da:	f8 01       	movw	r30, r16
    21dc:	10 82       	st	Z, r1
    21de:	2e 96       	adiw	r28, 0x0e	; 14
    21e0:	e4 e0       	ldi	r30, 0x04	; 4
    21e2:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__epilogue_restores__+0x1c>

000021e6 <__ultoa_invert>:
    21e6:	fa 01       	movw	r30, r20
    21e8:	aa 27       	eor	r26, r26
    21ea:	28 30       	cpi	r18, 0x08	; 8
    21ec:	51 f1       	breq	.+84     	; 0x2242 <__ultoa_invert+0x5c>
    21ee:	20 31       	cpi	r18, 0x10	; 16
    21f0:	81 f1       	breq	.+96     	; 0x2252 <__ultoa_invert+0x6c>
    21f2:	e8 94       	clt
    21f4:	6f 93       	push	r22
    21f6:	6e 7f       	andi	r22, 0xFE	; 254
    21f8:	6e 5f       	subi	r22, 0xFE	; 254
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	af 4f       	sbci	r26, 0xFF	; 255
    2202:	b1 e0       	ldi	r27, 0x01	; 1
    2204:	3e d0       	rcall	.+124    	; 0x2282 <__ultoa_invert+0x9c>
    2206:	b4 e0       	ldi	r27, 0x04	; 4
    2208:	3c d0       	rcall	.+120    	; 0x2282 <__ultoa_invert+0x9c>
    220a:	67 0f       	add	r22, r23
    220c:	78 1f       	adc	r23, r24
    220e:	89 1f       	adc	r24, r25
    2210:	9a 1f       	adc	r25, r26
    2212:	a1 1d       	adc	r26, r1
    2214:	68 0f       	add	r22, r24
    2216:	79 1f       	adc	r23, r25
    2218:	8a 1f       	adc	r24, r26
    221a:	91 1d       	adc	r25, r1
    221c:	a1 1d       	adc	r26, r1
    221e:	6a 0f       	add	r22, r26
    2220:	71 1d       	adc	r23, r1
    2222:	81 1d       	adc	r24, r1
    2224:	91 1d       	adc	r25, r1
    2226:	a1 1d       	adc	r26, r1
    2228:	20 d0       	rcall	.+64     	; 0x226a <__ultoa_invert+0x84>
    222a:	09 f4       	brne	.+2      	; 0x222e <__ultoa_invert+0x48>
    222c:	68 94       	set
    222e:	3f 91       	pop	r19
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	26 9f       	mul	r18, r22
    2234:	11 24       	eor	r1, r1
    2236:	30 19       	sub	r19, r0
    2238:	30 5d       	subi	r19, 0xD0	; 208
    223a:	31 93       	st	Z+, r19
    223c:	de f6       	brtc	.-74     	; 0x21f4 <__ultoa_invert+0xe>
    223e:	cf 01       	movw	r24, r30
    2240:	08 95       	ret
    2242:	46 2f       	mov	r20, r22
    2244:	47 70       	andi	r20, 0x07	; 7
    2246:	40 5d       	subi	r20, 0xD0	; 208
    2248:	41 93       	st	Z+, r20
    224a:	b3 e0       	ldi	r27, 0x03	; 3
    224c:	0f d0       	rcall	.+30     	; 0x226c <__ultoa_invert+0x86>
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__ultoa_invert+0x5c>
    2250:	f6 cf       	rjmp	.-20     	; 0x223e <__ultoa_invert+0x58>
    2252:	46 2f       	mov	r20, r22
    2254:	4f 70       	andi	r20, 0x0F	; 15
    2256:	40 5d       	subi	r20, 0xD0	; 208
    2258:	4a 33       	cpi	r20, 0x3A	; 58
    225a:	18 f0       	brcs	.+6      	; 0x2262 <__ultoa_invert+0x7c>
    225c:	49 5d       	subi	r20, 0xD9	; 217
    225e:	31 fd       	sbrc	r19, 1
    2260:	40 52       	subi	r20, 0x20	; 32
    2262:	41 93       	st	Z+, r20
    2264:	02 d0       	rcall	.+4      	; 0x226a <__ultoa_invert+0x84>
    2266:	a9 f7       	brne	.-22     	; 0x2252 <__ultoa_invert+0x6c>
    2268:	ea cf       	rjmp	.-44     	; 0x223e <__ultoa_invert+0x58>
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	a6 95       	lsr	r26
    226e:	97 95       	ror	r25
    2270:	87 95       	ror	r24
    2272:	77 95       	ror	r23
    2274:	67 95       	ror	r22
    2276:	ba 95       	dec	r27
    2278:	c9 f7       	brne	.-14     	; 0x226c <__ultoa_invert+0x86>
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	61 05       	cpc	r22, r1
    227e:	71 05       	cpc	r23, r1
    2280:	08 95       	ret
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	0a 2e       	mov	r0, r26
    2288:	06 94       	lsr	r0
    228a:	57 95       	ror	r21
    228c:	47 95       	ror	r20
    228e:	37 95       	ror	r19
    2290:	27 95       	ror	r18
    2292:	ba 95       	dec	r27
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__ultoa_invert+0xa2>
    2296:	62 0f       	add	r22, r18
    2298:	73 1f       	adc	r23, r19
    229a:	84 1f       	adc	r24, r20
    229c:	95 1f       	adc	r25, r21
    229e:	a0 1d       	adc	r26, r0
    22a0:	08 95       	ret

000022a2 <strtod>:
    22a2:	a0 e0       	ldi	r26, 0x00	; 0
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e7 e5       	ldi	r30, 0x57	; 87
    22a8:	f1 e1       	ldi	r31, 0x11	; 17
    22aa:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__prologue_saves__+0xc>
    22ae:	ec 01       	movw	r28, r24
    22b0:	5b 01       	movw	r10, r22
    22b2:	61 15       	cp	r22, r1
    22b4:	71 05       	cpc	r23, r1
    22b6:	19 f0       	breq	.+6      	; 0x22be <strtod+0x1c>
    22b8:	fb 01       	movw	r30, r22
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	f9 90       	ld	r15, Y+
    22c0:	8f 2d       	mov	r24, r15
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 b1 12 	call	0x2562	; 0x2562 <isspace>
    22c8:	89 2b       	or	r24, r25
    22ca:	c9 f7       	brne	.-14     	; 0x22be <strtod+0x1c>
    22cc:	fd e2       	ldi	r31, 0x2D	; 45
    22ce:	ff 16       	cp	r15, r31
    22d0:	21 f4       	brne	.+8      	; 0x22da <strtod+0x38>
    22d2:	f9 90       	ld	r15, Y+
    22d4:	ee 24       	eor	r14, r14
    22d6:	e3 94       	inc	r14
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <strtod+0x42>
    22da:	2b e2       	ldi	r18, 0x2B	; 43
    22dc:	f2 16       	cp	r15, r18
    22de:	09 f4       	brne	.+2      	; 0x22e2 <strtod+0x40>
    22e0:	f9 90       	ld	r15, Y+
    22e2:	ee 24       	eor	r14, r14
    22e4:	8e 01       	movw	r16, r28
    22e6:	01 50       	subi	r16, 0x01	; 1
    22e8:	10 40       	sbci	r17, 0x00	; 0
    22ea:	c8 01       	movw	r24, r16
    22ec:	66 e5       	ldi	r22, 0x56	; 86
    22ee:	71 e0       	ldi	r23, 0x01	; 1
    22f0:	43 e0       	ldi	r20, 0x03	; 3
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 b9 12 	call	0x2572	; 0x2572 <strncasecmp_P>
    22f8:	89 2b       	or	r24, r25
    22fa:	01 f5       	brne	.+64     	; 0x233c <strtod+0x9a>
    22fc:	8e 01       	movw	r16, r28
    22fe:	0e 5f       	subi	r16, 0xFE	; 254
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	c8 01       	movw	r24, r16
    2304:	69 e5       	ldi	r22, 0x59	; 89
    2306:	71 e0       	ldi	r23, 0x01	; 1
    2308:	45 e0       	ldi	r20, 0x05	; 5
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	0e 94 b9 12 	call	0x2572	; 0x2572 <strncasecmp_P>
    2310:	89 2b       	or	r24, r25
    2312:	19 f4       	brne	.+6      	; 0x231a <strtod+0x78>
    2314:	8e 01       	movw	r16, r28
    2316:	09 5f       	subi	r16, 0xF9	; 249
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	a1 14       	cp	r10, r1
    231c:	b1 04       	cpc	r11, r1
    231e:	19 f0       	breq	.+6      	; 0x2326 <strtod+0x84>
    2320:	f5 01       	movw	r30, r10
    2322:	11 83       	std	Z+1, r17	; 0x01
    2324:	00 83       	st	Z, r16
    2326:	e0 fc       	sbrc	r14, 0
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <strtod+0x90>
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	80 e8       	ldi	r24, 0x80	; 128
    2330:	14 c0       	rjmp	.+40     	; 0x235a <strtod+0xb8>
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	80 e8       	ldi	r24, 0x80	; 128
    2338:	6f ef       	ldi	r22, 0xFF	; 255
    233a:	08 c1       	rjmp	.+528    	; 0x254c <strtod+0x2aa>
    233c:	c8 01       	movw	r24, r16
    233e:	6e e5       	ldi	r22, 0x5E	; 94
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	43 e0       	ldi	r20, 0x03	; 3
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	0e 94 b9 12 	call	0x2572	; 0x2572 <strncasecmp_P>
    234a:	89 2b       	or	r24, r25
    234c:	69 f4       	brne	.+26     	; 0x2368 <strtod+0xc6>
    234e:	a1 14       	cp	r10, r1
    2350:	b1 04       	cpc	r11, r1
    2352:	29 f4       	brne	.+10     	; 0x235e <strtod+0xbc>
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	80 ec       	ldi	r24, 0xC0	; 192
    235a:	6f e7       	ldi	r22, 0x7F	; 127
    235c:	f7 c0       	rjmp	.+494    	; 0x254c <strtod+0x2aa>
    235e:	22 96       	adiw	r28, 0x02	; 2
    2360:	f5 01       	movw	r30, r10
    2362:	d1 83       	std	Z+1, r29	; 0x01
    2364:	c0 83       	st	Z, r28
    2366:	f6 cf       	rjmp	.-20     	; 0x2354 <strtod+0xb2>
    2368:	88 24       	eor	r8, r8
    236a:	99 24       	eor	r9, r9
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	ef 2d       	mov	r30, r15
    2376:	e0 53       	subi	r30, 0x30	; 48
    2378:	ea 30       	cpi	r30, 0x0A	; 10
    237a:	a0 f5       	brcc	.+104    	; 0x23e4 <strtod+0x142>
    237c:	f2 e0       	ldi	r31, 0x02	; 2
    237e:	ef 2a       	or	r14, r31
    2380:	8e 2d       	mov	r24, r14
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 01       	movw	r18, r24
    2386:	28 70       	andi	r18, 0x08	; 8
    2388:	30 70       	andi	r19, 0x00	; 0
    238a:	e2 fe       	sbrs	r14, 2
    238c:	06 c0       	rjmp	.+12     	; 0x239a <strtod+0xf8>
    238e:	23 2b       	or	r18, r19
    2390:	79 f5       	brne	.+94     	; 0x23f0 <strtod+0x14e>
    2392:	08 94       	sec
    2394:	81 1c       	adc	r8, r1
    2396:	91 1c       	adc	r9, r1
    2398:	2b c0       	rjmp	.+86     	; 0x23f0 <strtod+0x14e>
    239a:	23 2b       	or	r18, r19
    239c:	19 f0       	breq	.+6      	; 0x23a4 <strtod+0x102>
    239e:	08 94       	sec
    23a0:	81 08       	sbc	r8, r1
    23a2:	91 08       	sbc	r9, r1
    23a4:	db 01       	movw	r26, r22
    23a6:	ca 01       	movw	r24, r20
    23a8:	12 e0       	ldi	r17, 0x02	; 2
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	aa 1f       	adc	r26, r26
    23b0:	bb 1f       	adc	r27, r27
    23b2:	1a 95       	dec	r17
    23b4:	d1 f7       	brne	.-12     	; 0x23aa <strtod+0x108>
    23b6:	48 0f       	add	r20, r24
    23b8:	59 1f       	adc	r21, r25
    23ba:	6a 1f       	adc	r22, r26
    23bc:	7b 1f       	adc	r23, r27
    23be:	44 0f       	add	r20, r20
    23c0:	55 1f       	adc	r21, r21
    23c2:	66 1f       	adc	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	4e 0f       	add	r20, r30
    23c8:	51 1d       	adc	r21, r1
    23ca:	61 1d       	adc	r22, r1
    23cc:	71 1d       	adc	r23, r1
    23ce:	48 39       	cpi	r20, 0x98	; 152
    23d0:	29 e9       	ldi	r18, 0x99	; 153
    23d2:	52 07       	cpc	r21, r18
    23d4:	29 e9       	ldi	r18, 0x99	; 153
    23d6:	62 07       	cpc	r22, r18
    23d8:	29 e1       	ldi	r18, 0x19	; 25
    23da:	72 07       	cpc	r23, r18
    23dc:	48 f0       	brcs	.+18     	; 0x23f0 <strtod+0x14e>
    23de:	84 e0       	ldi	r24, 0x04	; 4
    23e0:	e8 2a       	or	r14, r24
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <strtod+0x14e>
    23e4:	ee 3f       	cpi	r30, 0xFE	; 254
    23e6:	31 f4       	brne	.+12     	; 0x23f4 <strtod+0x152>
    23e8:	e3 fc       	sbrc	r14, 3
    23ea:	39 c0       	rjmp	.+114    	; 0x245e <strtod+0x1bc>
    23ec:	98 e0       	ldi	r25, 0x08	; 8
    23ee:	e9 2a       	or	r14, r25
    23f0:	f9 90       	ld	r15, Y+
    23f2:	c0 cf       	rjmp	.-128    	; 0x2374 <strtod+0xd2>
    23f4:	e5 33       	cpi	r30, 0x35	; 53
    23f6:	11 f0       	breq	.+4      	; 0x23fc <strtod+0x15a>
    23f8:	e5 31       	cpi	r30, 0x15	; 21
    23fa:	89 f5       	brne	.+98     	; 0x245e <strtod+0x1bc>
    23fc:	29 91       	ld	r18, Y+
    23fe:	2d 32       	cpi	r18, 0x2D	; 45
    2400:	19 f4       	brne	.+6      	; 0x2408 <strtod+0x166>
    2402:	e0 e1       	ldi	r30, 0x10	; 16
    2404:	ee 2a       	or	r14, r30
    2406:	05 c0       	rjmp	.+10     	; 0x2412 <strtod+0x170>
    2408:	2b 32       	cpi	r18, 0x2B	; 43
    240a:	19 f0       	breq	.+6      	; 0x2412 <strtod+0x170>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <strtod+0x176>
    2412:	29 91       	ld	r18, Y+
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	e2 2f       	mov	r30, r18
    241a:	e0 53       	subi	r30, 0x30	; 48
    241c:	ea 30       	cpi	r30, 0x0A	; 10
    241e:	18 f0       	brcs	.+6      	; 0x2426 <strtod+0x184>
    2420:	c8 1b       	sub	r28, r24
    2422:	d9 0b       	sbc	r29, r25
    2424:	1c c0       	rjmp	.+56     	; 0x245e <strtod+0x1bc>
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	fc e0       	ldi	r31, 0x0C	; 12
    242c:	20 38       	cpi	r18, 0x80	; 128
    242e:	3f 07       	cpc	r19, r31
    2430:	5c f4       	brge	.+22     	; 0x2448 <strtod+0x1a6>
    2432:	c9 01       	movw	r24, r18
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	28 0f       	add	r18, r24
    243e:	39 1f       	adc	r19, r25
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	2e 0f       	add	r18, r30
    2446:	31 1d       	adc	r19, r1
    2448:	e9 91       	ld	r30, Y+
    244a:	e0 53       	subi	r30, 0x30	; 48
    244c:	ea 30       	cpi	r30, 0x0A	; 10
    244e:	68 f3       	brcs	.-38     	; 0x242a <strtod+0x188>
    2450:	e4 fe       	sbrs	r14, 4
    2452:	03 c0       	rjmp	.+6      	; 0x245a <strtod+0x1b8>
    2454:	30 95       	com	r19
    2456:	21 95       	neg	r18
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	82 0e       	add	r8, r18
    245c:	93 1e       	adc	r9, r19
    245e:	ce 2c       	mov	r12, r14
    2460:	dd 24       	eor	r13, r13
    2462:	e1 fe       	sbrs	r14, 1
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <strtod+0x1d2>
    2466:	a1 14       	cp	r10, r1
    2468:	b1 04       	cpc	r11, r1
    246a:	21 f0       	breq	.+8      	; 0x2474 <strtod+0x1d2>
    246c:	21 97       	sbiw	r28, 0x01	; 1
    246e:	f5 01       	movw	r30, r10
    2470:	d1 83       	std	Z+1, r29	; 0x01
    2472:	c0 83       	st	Z, r28
    2474:	cb 01       	movw	r24, r22
    2476:	ba 01       	movw	r22, r20
    2478:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
    247c:	7b 01       	movw	r14, r22
    247e:	8c 01       	movw	r16, r24
    2480:	f3 e0       	ldi	r31, 0x03	; 3
    2482:	cf 22       	and	r12, r31
    2484:	dd 24       	eor	r13, r13
    2486:	23 e0       	ldi	r18, 0x03	; 3
    2488:	c2 16       	cp	r12, r18
    248a:	d1 04       	cpc	r13, r1
    248c:	21 f4       	brne	.+8      	; 0x2496 <strtod+0x1f4>
    248e:	17 fb       	bst	r17, 7
    2490:	10 95       	com	r17
    2492:	17 f9       	bld	r17, 7
    2494:	10 95       	com	r17
    2496:	57 01       	movw	r10, r14
    2498:	68 01       	movw	r12, r16
    249a:	c8 01       	movw	r24, r16
    249c:	b7 01       	movw	r22, r14
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__cmpsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <strtod+0x20e>
    24ae:	4a c0       	rjmp	.+148    	; 0x2544 <strtod+0x2a2>
    24b0:	97 fe       	sbrs	r9, 7
    24b2:	0d c0       	rjmp	.+26     	; 0x24ce <strtod+0x22c>
    24b4:	25 e7       	ldi	r18, 0x75	; 117
    24b6:	e2 2e       	mov	r14, r18
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	f2 2e       	mov	r15, r18
    24bc:	90 94       	com	r9
    24be:	81 94       	neg	r8
    24c0:	91 08       	sbc	r9, r1
    24c2:	93 94       	inc	r9
    24c4:	c0 e2       	ldi	r28, 0x20	; 32
    24c6:	d0 e0       	ldi	r29, 0x00	; 0
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	12 c0       	rjmp	.+36     	; 0x24f2 <strtod+0x250>
    24ce:	9d e8       	ldi	r25, 0x8D	; 141
    24d0:	e9 2e       	mov	r14, r25
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	f9 2e       	mov	r15, r25
    24d6:	f6 cf       	rjmp	.-20     	; 0x24c4 <strtod+0x222>
    24d8:	f7 01       	movw	r30, r14
    24da:	25 91       	lpm	r18, Z+
    24dc:	35 91       	lpm	r19, Z+
    24de:	45 91       	lpm	r20, Z+
    24e0:	54 91       	lpm	r21, Z+
    24e2:	c6 01       	movw	r24, r12
    24e4:	b5 01       	movw	r22, r10
    24e6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    24ea:	5b 01       	movw	r10, r22
    24ec:	6c 01       	movw	r12, r24
    24ee:	8c 1a       	sub	r8, r28
    24f0:	9d 0a       	sbc	r9, r29
    24f2:	8c 16       	cp	r8, r28
    24f4:	9d 06       	cpc	r9, r29
    24f6:	84 f7       	brge	.-32     	; 0x24d8 <strtod+0x236>
    24f8:	d5 95       	asr	r29
    24fa:	c7 95       	ror	r28
    24fc:	0f 5f       	subi	r16, 0xFF	; 255
    24fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2500:	06 30       	cpi	r16, 0x06	; 6
    2502:	11 05       	cpc	r17, r1
    2504:	29 f0       	breq	.+10     	; 0x2510 <strtod+0x26e>
    2506:	8c ef       	ldi	r24, 0xFC	; 252
    2508:	9f ef       	ldi	r25, 0xFF	; 255
    250a:	e8 0e       	add	r14, r24
    250c:	f9 1e       	adc	r15, r25
    250e:	f1 cf       	rjmp	.-30     	; 0x24f2 <strtod+0x250>
    2510:	c5 01       	movw	r24, r10
    2512:	d6 01       	movw	r26, r12
    2514:	7c 01       	movw	r14, r24
    2516:	8d 01       	movw	r16, r26
    2518:	8c 2d       	mov	r24, r12
    251a:	88 0f       	add	r24, r24
    251c:	8d 2d       	mov	r24, r13
    251e:	88 1f       	adc	r24, r24
    2520:	8f 3f       	cpi	r24, 0xFF	; 255
    2522:	51 f0       	breq	.+20     	; 0x2538 <strtod+0x296>
    2524:	c6 01       	movw	r24, r12
    2526:	b5 01       	movw	r22, r10
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__cmpsf2>
    2534:	88 23       	and	r24, r24
    2536:	31 f4       	brne	.+12     	; 0x2544 <strtod+0x2a2>
    2538:	82 e2       	ldi	r24, 0x22	; 34
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	90 93 71 03 	sts	0x0371, r25
    2540:	80 93 70 03 	sts	0x0370, r24
    2544:	7e 2d       	mov	r23, r14
    2546:	9f 2d       	mov	r25, r15
    2548:	80 2f       	mov	r24, r16
    254a:	61 2f       	mov	r22, r17
    254c:	27 2f       	mov	r18, r23
    254e:	39 2f       	mov	r19, r25
    2550:	48 2f       	mov	r20, r24
    2552:	56 2f       	mov	r21, r22
    2554:	b9 01       	movw	r22, r18
    2556:	ca 01       	movw	r24, r20
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	ec e0       	ldi	r30, 0x0C	; 12
    255e:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__epilogue_restores__+0xc>

00002562 <isspace>:
    2562:	91 11       	cpse	r25, r1
    2564:	a9 c0       	rjmp	.+338    	; 0x26b8 <__ctype_isfalse>
    2566:	80 32       	cpi	r24, 0x20	; 32
    2568:	19 f0       	breq	.+6      	; 0x2570 <isspace+0xe>
    256a:	89 50       	subi	r24, 0x09	; 9
    256c:	85 50       	subi	r24, 0x05	; 5
    256e:	d0 f7       	brcc	.-12     	; 0x2564 <isspace+0x2>
    2570:	08 95       	ret

00002572 <strncasecmp_P>:
    2572:	fb 01       	movw	r30, r22
    2574:	dc 01       	movw	r26, r24
    2576:	41 50       	subi	r20, 0x01	; 1
    2578:	50 40       	sbci	r21, 0x00	; 0
    257a:	88 f0       	brcs	.+34     	; 0x259e <strncasecmp_P+0x2c>
    257c:	8d 91       	ld	r24, X+
    257e:	81 34       	cpi	r24, 0x41	; 65
    2580:	1c f0       	brlt	.+6      	; 0x2588 <strncasecmp_P+0x16>
    2582:	8b 35       	cpi	r24, 0x5B	; 91
    2584:	0c f4       	brge	.+2      	; 0x2588 <strncasecmp_P+0x16>
    2586:	80 5e       	subi	r24, 0xE0	; 224
    2588:	65 91       	lpm	r22, Z+
    258a:	61 34       	cpi	r22, 0x41	; 65
    258c:	1c f0       	brlt	.+6      	; 0x2594 <strncasecmp_P+0x22>
    258e:	6b 35       	cpi	r22, 0x5B	; 91
    2590:	0c f4       	brge	.+2      	; 0x2594 <strncasecmp_P+0x22>
    2592:	60 5e       	subi	r22, 0xE0	; 224
    2594:	86 1b       	sub	r24, r22
    2596:	61 11       	cpse	r22, r1
    2598:	71 f3       	breq	.-36     	; 0x2576 <strncasecmp_P+0x4>
    259a:	99 0b       	sbc	r25, r25
    259c:	08 95       	ret
    259e:	88 1b       	sub	r24, r24
    25a0:	fc cf       	rjmp	.-8      	; 0x259a <strncasecmp_P+0x28>

000025a2 <__cmpsf2>:
    25a2:	03 d0       	rcall	.+6      	; 0x25aa <__fp_cmp>
    25a4:	08 f4       	brcc	.+2      	; 0x25a8 <__cmpsf2+0x6>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	08 95       	ret

000025aa <__fp_cmp>:
    25aa:	99 0f       	add	r25, r25
    25ac:	00 08       	sbc	r0, r0
    25ae:	55 0f       	add	r21, r21
    25b0:	aa 0b       	sbc	r26, r26
    25b2:	e0 e8       	ldi	r30, 0x80	; 128
    25b4:	fe ef       	ldi	r31, 0xFE	; 254
    25b6:	16 16       	cp	r1, r22
    25b8:	17 06       	cpc	r1, r23
    25ba:	e8 07       	cpc	r30, r24
    25bc:	f9 07       	cpc	r31, r25
    25be:	c0 f0       	brcs	.+48     	; 0x25f0 <__fp_cmp+0x46>
    25c0:	12 16       	cp	r1, r18
    25c2:	13 06       	cpc	r1, r19
    25c4:	e4 07       	cpc	r30, r20
    25c6:	f5 07       	cpc	r31, r21
    25c8:	98 f0       	brcs	.+38     	; 0x25f0 <__fp_cmp+0x46>
    25ca:	62 1b       	sub	r22, r18
    25cc:	73 0b       	sbc	r23, r19
    25ce:	84 0b       	sbc	r24, r20
    25d0:	95 0b       	sbc	r25, r21
    25d2:	39 f4       	brne	.+14     	; 0x25e2 <__fp_cmp+0x38>
    25d4:	0a 26       	eor	r0, r26
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <__fp_cmp+0x46>
    25d8:	23 2b       	or	r18, r19
    25da:	24 2b       	or	r18, r20
    25dc:	25 2b       	or	r18, r21
    25de:	21 f4       	brne	.+8      	; 0x25e8 <__fp_cmp+0x3e>
    25e0:	08 95       	ret
    25e2:	0a 26       	eor	r0, r26
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <__fp_cmp+0x3e>
    25e6:	a1 40       	sbci	r26, 0x01	; 1
    25e8:	a6 95       	lsr	r26
    25ea:	8f ef       	ldi	r24, 0xFF	; 255
    25ec:	81 1d       	adc	r24, r1
    25ee:	81 1d       	adc	r24, r1
    25f0:	08 95       	ret

000025f2 <__mulsf3>:
    25f2:	0b d0       	rcall	.+22     	; 0x260a <__mulsf3x>
    25f4:	d1 cb       	rjmp	.-2142   	; 0x1d98 <__fp_round>
    25f6:	c2 db       	rcall	.-2172   	; 0x1d7c <__fp_pscA>
    25f8:	28 f0       	brcs	.+10     	; 0x2604 <__mulsf3+0x12>
    25fa:	c7 db       	rcall	.-2162   	; 0x1d8a <__fp_pscB>
    25fc:	18 f0       	brcs	.+6      	; 0x2604 <__mulsf3+0x12>
    25fe:	95 23       	and	r25, r21
    2600:	09 f0       	breq	.+2      	; 0x2604 <__mulsf3+0x12>
    2602:	8a cb       	rjmp	.-2284   	; 0x1d18 <__fp_inf>
    2604:	b8 cb       	rjmp	.-2192   	; 0x1d76 <__fp_nan>
    2606:	11 24       	eor	r1, r1
    2608:	12 cc       	rjmp	.-2012   	; 0x1e2e <__fp_szero>

0000260a <__mulsf3x>:
    260a:	d7 db       	rcall	.-2130   	; 0x1dba <__fp_split3>
    260c:	a0 f3       	brcs	.-24     	; 0x25f6 <__mulsf3+0x4>

0000260e <__mulsf3_pse>:
    260e:	95 9f       	mul	r25, r21
    2610:	d1 f3       	breq	.-12     	; 0x2606 <__mulsf3+0x14>
    2612:	95 0f       	add	r25, r21
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	55 1f       	adc	r21, r21
    2618:	62 9f       	mul	r22, r18
    261a:	f0 01       	movw	r30, r0
    261c:	72 9f       	mul	r23, r18
    261e:	bb 27       	eor	r27, r27
    2620:	f0 0d       	add	r31, r0
    2622:	b1 1d       	adc	r27, r1
    2624:	63 9f       	mul	r22, r19
    2626:	aa 27       	eor	r26, r26
    2628:	f0 0d       	add	r31, r0
    262a:	b1 1d       	adc	r27, r1
    262c:	aa 1f       	adc	r26, r26
    262e:	64 9f       	mul	r22, r20
    2630:	66 27       	eor	r22, r22
    2632:	b0 0d       	add	r27, r0
    2634:	a1 1d       	adc	r26, r1
    2636:	66 1f       	adc	r22, r22
    2638:	82 9f       	mul	r24, r18
    263a:	22 27       	eor	r18, r18
    263c:	b0 0d       	add	r27, r0
    263e:	a1 1d       	adc	r26, r1
    2640:	62 1f       	adc	r22, r18
    2642:	73 9f       	mul	r23, r19
    2644:	b0 0d       	add	r27, r0
    2646:	a1 1d       	adc	r26, r1
    2648:	62 1f       	adc	r22, r18
    264a:	83 9f       	mul	r24, r19
    264c:	a0 0d       	add	r26, r0
    264e:	61 1d       	adc	r22, r1
    2650:	22 1f       	adc	r18, r18
    2652:	74 9f       	mul	r23, r20
    2654:	33 27       	eor	r19, r19
    2656:	a0 0d       	add	r26, r0
    2658:	61 1d       	adc	r22, r1
    265a:	23 1f       	adc	r18, r19
    265c:	84 9f       	mul	r24, r20
    265e:	60 0d       	add	r22, r0
    2660:	21 1d       	adc	r18, r1
    2662:	82 2f       	mov	r24, r18
    2664:	76 2f       	mov	r23, r22
    2666:	6a 2f       	mov	r22, r26
    2668:	11 24       	eor	r1, r1
    266a:	9f 57       	subi	r25, 0x7F	; 127
    266c:	50 40       	sbci	r21, 0x00	; 0
    266e:	8a f0       	brmi	.+34     	; 0x2692 <__mulsf3_pse+0x84>
    2670:	e1 f0       	breq	.+56     	; 0x26aa <__mulsf3_pse+0x9c>
    2672:	88 23       	and	r24, r24
    2674:	4a f0       	brmi	.+18     	; 0x2688 <__mulsf3_pse+0x7a>
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	bb 1f       	adc	r27, r27
    267c:	66 1f       	adc	r22, r22
    267e:	77 1f       	adc	r23, r23
    2680:	88 1f       	adc	r24, r24
    2682:	91 50       	subi	r25, 0x01	; 1
    2684:	50 40       	sbci	r21, 0x00	; 0
    2686:	a9 f7       	brne	.-22     	; 0x2672 <__mulsf3_pse+0x64>
    2688:	9e 3f       	cpi	r25, 0xFE	; 254
    268a:	51 05       	cpc	r21, r1
    268c:	70 f0       	brcs	.+28     	; 0x26aa <__mulsf3_pse+0x9c>
    268e:	44 cb       	rjmp	.-2424   	; 0x1d18 <__fp_inf>
    2690:	ce cb       	rjmp	.-2148   	; 0x1e2e <__fp_szero>
    2692:	5f 3f       	cpi	r21, 0xFF	; 255
    2694:	ec f3       	brlt	.-6      	; 0x2690 <__mulsf3_pse+0x82>
    2696:	98 3e       	cpi	r25, 0xE8	; 232
    2698:	dc f3       	brlt	.-10     	; 0x2690 <__mulsf3_pse+0x82>
    269a:	86 95       	lsr	r24
    269c:	77 95       	ror	r23
    269e:	67 95       	ror	r22
    26a0:	b7 95       	ror	r27
    26a2:	f7 95       	ror	r31
    26a4:	e7 95       	ror	r30
    26a6:	9f 5f       	subi	r25, 0xFF	; 255
    26a8:	c1 f7       	brne	.-16     	; 0x269a <__mulsf3_pse+0x8c>
    26aa:	fe 2b       	or	r31, r30
    26ac:	88 0f       	add	r24, r24
    26ae:	91 1d       	adc	r25, r1
    26b0:	96 95       	lsr	r25
    26b2:	87 95       	ror	r24
    26b4:	97 f9       	bld	r25, 7
    26b6:	08 95       	ret

000026b8 <__ctype_isfalse>:
    26b8:	99 27       	eor	r25, r25
    26ba:	88 27       	eor	r24, r24

000026bc <__ctype_istrue>:
    26bc:	08 95       	ret

000026be <_exit>:
    26be:	f8 94       	cli

000026c0 <__stop_program>:
    26c0:	ff cf       	rjmp	.-2      	; 0x26c0 <__stop_program>
